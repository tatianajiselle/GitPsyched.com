{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form.  */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder() { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n      this.focus();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                         this._keyManager.setLastItemActive();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && this._keyManager.activeItem) {\n      event.preventDefault();\n      this._keyManager.activeItem._selectViaInteraction();\n    } else {\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      const previouslyFocusedIndex = this._keyManager.activeItemIndex;\n\n      this._keyManager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && this._keyManager.activeItem &&\n          this._keyManager.activeItemIndex !== previouslyFocusedIndex) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this.focused = false;\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    this.optionSelectionChanges.pipe(\n      takeUntil(merge(this._destroy, this.options.changes)),\n      filter(event => event.isUserInput)\n    ).subscribe(event => {\n      this._onSelect(event.source);\n\n      if (!this.multiple) {\n        this.close();\n      }\n    });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** @deprecated */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element, false).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal<any>;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  _position: MatTabBodyPositionState;\n  @Input('position') set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  _origin: MatTabBodyOriginState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input('origin') set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() focusChange: EventEmitter<MatTabChangeEvent> = new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   */\n  @Output() selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n  get scrollDistance(): number { return this._scrollDistance; }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {speedFactor: globalOptions.baseSpeedFactor};\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(elementRef: ElementRef, private _platform: Platform) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== Node.COMMENT_NODE)\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.0.4-60b0625');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal<any>;\n  private _panelOpen: boolean = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of escape keyboard events. */\n  private _escapeEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._destroyPanel();\n    this._escapeEventStream.complete();\n  }\n\n  /* Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._escapeEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  get optionSelections(): Observable<MatOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this._escapeEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._element.nativeElement.readOnly) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n   /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options.*/\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\n/** Fade-in duration for the ripples. Can be modified with the speedFactor option. */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n\n/** Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor. */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst IGNORE_MOUSE_EVENTS_TIMEOUT = 800;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const duration = RIPPLE_FADE_IN_DURATION / (config.speedFactor || 1);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + IGNORE_MOUSE_EVENTS_TIMEOUT;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  get direction(): SortDirection { return this._direction; }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear() { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable) {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable) {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly indicatorToggle: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('desc', style({transform: 'translateY(10px)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('asc', style({transform: 'rotate(-45deg)'})),\n    state('desc', style({transform: 'rotate(45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('asc', style({transform: 'rotate(45deg)'})),\n    state('desc', style({transform: 'rotate(-45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that moves the indicator in and out of view when sorting is enabled/disabled. */\n  indicatorToggle: trigger('indicatorToggle', [\n    transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(-25%)', opacity: 0})\n    ]))),\n    transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(-25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(25%)', opacity: 0})\n    ]))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.indicatorToggle\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input('start') start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index() { return this._index; }\n  set index(value: any) {\n    this._index = coerceNumberProperty(value);\n  }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(value: any) {\n    this._selected = coerceBooleanProperty(value);\n  }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active() { return this._active; }\n  set active(value: any) {\n    this._active = coerceBooleanProperty(value);\n  }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional() { return this._optional; }\n  set optional(value: any) {\n    this._optional = coerceBooleanProperty(value);\n  }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by <ng-template matStepLabel>. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {'(click)': '_stepper.next()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext { }\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {'(click)': '_stepper.previous()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  set data(data: T[]) { this._data.next(data); }\n  get data() { return this._data.value; }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  set filter(filter: string) { this._filter.next(filter); }\n  get filter(): string { return this._filter.value; }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  get sort(): MatSort|null { return this._sort; }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  get paginator(): MatPaginator|null { return this._paginator; }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n\n    // If the value is a string and only whitespace, return the value.\n    // Otherwise +value will convert it to 0.\n    if (typeof value === 'string' && !value.trim()) {\n      return value;\n    }\n\n    return isNaN(+value) ? value : +value;\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overriden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overriden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort || !this.sort.active || this.sort.direction == '') { return data; }\n\n    const active = this.sort.active;\n    const direction = this.sort.direction;\n\n    return data.slice().sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n      return (valueA < valueB ? -1 : 1) * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by <ng-template mat-tab-label>. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an <ng-content>. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal<any> | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal<any> | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  source: MatSlideToggle;\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() change: EventEmitter<MatSlideToggleChange> = new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus() {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle() {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    let event = new MatSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.onChange(this.checked);\n    this.change.emit(event);\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert() { return this._invert; }\n  set invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max() { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min() { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step() { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /** @deprecated */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** @deprecated */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical() { return this._vertical; }\n  set vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() change = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() input = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emit a change and input event if the value changed. */\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has closed. */\n  private _afterClosed = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  closeWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   */\n extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: any = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.closeWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  /** The MatRadioButton that emits the change event. */\n  source: MatRadioButton | null;\n  /** The value of the MatRadioButton. */\n  value: any;\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(MatRadioButtonBase), 'accent');\n\n/**\n * A radio-button. May be inside of\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio.*/\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 23, speedFactor: 1.5};\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    const event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** @deprecated */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value) { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value) {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   */\n  @Output('open') onOpen = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   */\n  @Output('close') onClose = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged = new EventEmitter<void>();\n\n  /** @deprecated */\n  @Output('align-changed') onAlignChanged = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * <mat-drawer-container> component.\n *\n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private _doCheckSubject = new Subject<void>();\n\n  _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ContentChild,\n  ContentChildren, forwardRef, Inject, Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers;\n\n  @ContentChild(MatSidenavContent) _content;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage() {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage() {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage() {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progressbar \"for\".\n\n\n/**\n * <mat-progress-bar> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar {\n  /** Color of the progress bar. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  private _value: number = 0;\n\n  /** Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value() { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n\n  private _bufferValue: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue() { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    let scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode == 'buffer') {\n      let scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * <mat-progress-spinner> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. **/\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number {\n    return this._diameter;\n  }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /** @deprecated */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   */\n  @Output() onMenuOpen = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   */\n  @Output() onMenuClose = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /** Focuses the menu trigger. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n\n    // If the menu was opened by mouse, we focus the root node, which allows for the keyboard\n    // interactions to work. Otherwise, if the menu was opened by keyboard, we focus the first item.\n    if (this._openedByMouse) {\n      let rootNode = this._overlayRef!.overlayElement.firstElementChild as HTMLElement;\n\n      if (rootNode) {\n        this.menu.resetActiveItem();\n        rootNode.focus();\n      }\n    } else {\n      this.menu.focusFirstItem();\n    }\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse || !this.triggersSubmenu()) {\n      this.focus();\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatMenu, MAT_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MatRippleModule} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/** @deprecated */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/** @deprecated */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.selectionList && this.selectionList.disabled) || this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   */\n  @Output() selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList.onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': 'onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/** @deprecated */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/** @deprecated */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  /** Stream that emits when the menu item is hovered. */\n  _hovered: Subject<MatMenuItem> = new Subject();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(private _elementRef: ElementRef) {\n    super();\n  }\n\n  /** Focuses the menu item. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  ngOnDestroy() {\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === Node.TEXT_NODE) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition() { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition() { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  get overlapTrigger(): boolean {\n    return this._overlapTrigger;\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   */\n  @Input()\n  set classList(classes: string) { this.panelClass = classes; }\n  get classList(): string { return this.panelClass; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed = new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu. This method is used by the menu trigger\n   * to focus the first item when the menu is opened by the ENTER key.\n   */\n  focusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened by mouse,\n   * allowing the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked.  */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null {\n    return this._value;\n  }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled() { return !!this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input() get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input() get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input() get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private  _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n// Boilerplate for applying mixins to MatExpansionPanel.\n/** @docs-private */\n@Component({\n  template: '',\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatExpansionPanelBase extends CdkAccordionItem {\n  constructor(accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/**\n * <mat-expansion-panel> component.\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: _MatExpansionPanelMixinBase, useExisting: forwardRef(() => MatExpansionPanel)}\n  ],\n})\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase\n    implements CanDisable, AfterContentInit, OnChanges, OnDestroy {\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle;\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal<any>;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal<any>(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * <mat-expansion-panel-header> component.\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n *\n * Please refer to README.md for examples on how to use it.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement, false);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keyup event calling to toggle() if appropriate. */\n  _keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * <mat-panel-description> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * <mat-panel-title> directive.\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow,\n  MatExpansionPanelBase\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatExpansionPanelBase,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /** Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2. */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <mat-grid-list cols=\"3\" rowHeight=\"100px\">\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <mat-grid-list cols=\"3\" rowHeight=\"3:1\">\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height.*/\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <mat-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols() { return this._cols; }\n  set cols(value: any) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize() { return this._gutter; }\n  set gutterSize(value: any) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, true);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean {\n    return this._touchUi;\n  }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   */\n  @Output() selectedChanged = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    private _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private _afterAllClosedAtThisLevel = new Subject<void>();\n  private _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MatDialogRef} from './dialog-ref';\nimport {MatDialogContainer} from './dialog-container';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(public dialogRef: MatDialogRef<any>) { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(@Optional() private _container: MatDialogContainer) { }\n\n  ngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent { }\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) private _document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the <mat-icon> element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      // Note: 1 corresponds to `Node.ELEMENT_NODE` which we can't use in Universal.\n      if (element.childNodes[i].nodeType === 1) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>]\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  get minRows() { return this._minRows; }\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows() { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id() { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required() { return this._required; }\n  set required(value: any) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type() { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): any { return this._inputValueAccessor.value; }\n  set value(value: any) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly() { return this._readonly; }\n  set readonly(value: any) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of MatFormFieldControl.\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleConfig,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\"> element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Ripple configuration for the mouse ripples and focus indicators. */\n  _rippleConfig: RippleConfig = {centered: true, radius: 25, speedFactor: 1.5};\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input() get checked() {\n    return this._checked;\n  }\n\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input() get indeterminate() {\n    return this._indeterminate;\n  }\n\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, ...this._rippleConfig});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean {\n    return this._selected;\n  }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside <mat-chip> tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input() get selectable(): boolean {\n    return this._selectable;\n  }\n\n\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input() get removable(): boolean {\n    return this._removable;\n  }\n\n\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() selectionChange = new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   */\n  @Output() destroy = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() removed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   */\n  @Output('remove') onRemove = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n  get id() { return this._id || this._uid; }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  set required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  get required() {\n    return this._required;\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  get shouldLabelFloat(): boolean {\n    return !this.empty || this.focused;\n  }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() change: EventEmitter<MatChipListChange> = new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus() {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    let code = event.keyCode;\n    let target = event.target as HTMLElement;\n    let isInputEmpty = this._isInputEmpty(target);\n    let isRtl = this._dir && this._dir.value == 'rtl';\n\n    let isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let isBackKey = code === BACKSPACE;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur() { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus() { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog.  */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  OnDestroy,\n  Optional,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {\n  constructor(@Self() @Optional() @Inject(forwardRef(() => MatButton)) button: MatButton,\n              @Self() @Optional() @Inject(forwardRef(() => MatAnchor)) anchor: MatAnchor) {\n    // Set the default color palette for the mat-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {\n  constructor(@Self() @Optional() @Inject(forwardRef(() => MatButton)) button: MatButton,\n              @Self() @Optional() @Inject(forwardRef(() => MatAnchor)) anchor: MatAnchor) {\n    // Set the default color palette for the mat-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\n}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string {\n    return this._name;\n  }\n\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher **/\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string {\n    return `${this.id}-input`;\n  }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the <mat-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FloatLabelType, MAT_LABEL_GLOBAL_OPTIONS, LabelOptions} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatLabel} from './label';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {matFormFieldAnimations} from './form-field-animations';\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n  private _labelOptions: LabelOptions;\n\n  /** Color of the form field underline, based on the theme. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /** @deprecated Use `color` instead. */\n  @Input()\n  get dividerColor(): 'primary' | 'accent' | 'warn' { return this.color; }\n  set dividerColor(value) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker() { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel() { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   */\n  @Input()\n  get floatPlaceholder() { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel() { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField needs to run change detection.\n     */\n    stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with !platform.TRIDENT, logic currently duplicated to avoid breaking\n    // change from injecting the Platform.\n    this.useUtcForDisplay = !(typeof document === 'object' && !!document &&\n        /(msie|trident)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n      let dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param element\n * @param transformValue\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/* Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config: RippleConfig = this): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, config);\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n\n  /** Whether ripples on pointer-down are  disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","_this","detach","MatTabBodyPortal","prototype","ngOnDestroy","this","_centeringSub","closed","unsubscribe","_leavingSub","type","Directive","args","selector","ComponentFactoryResolver","ViewContainerRef","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_elementRef","_dir","_onCentering","EventEmitter","_beforeCentering","_afterLeavingCenter","_onCentered","Object","defineProperty","position","_position","_getLayoutDirection","origin","dir","_origin","ngOnInit","_onTranslateTabStarted","e","isCentering","_isCenterPosition","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","value","Component","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","animations","matTabsAnimations","translateTab","host","class","propDecorators","Output","_content","Input","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","elementRef","_changeDetectorRef","_super","call","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","tslib_1.__extends","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","Math","min","_tabs","length","max","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","tab","index","isActive","markForCheck","ngAfterContentInit","_subscribeToTabLabels","changes","subscribe","_focusChanged","event","toArray","merge","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","style","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","exportAs","inputs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","MatTabHeader","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","ENTER","SPACE","preventDefault","dirChange","change","observableOf","resize","realign","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","transform","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","Subject","_disableRipple","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","link","disableRipple","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabLabel","MatTab","declarations","MatInkBar","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","Node","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","MatToolbarModule","PlatformModule","VERSION","Version","isLeft","positionStrategy","left","isRight","right","centerHorizontally","config","verticalPosition","top","bottom","overlayConfig","_overlay","create","MatSnackBar","_createInjector","snackBarRef","userInjector","viewContainerRef","injector","injectionTokens","WeakMap","set","MatSnackBarRef","MAT_SNACK_BAR_DATA","data","PortalInjector","_injector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","MatSnackBarContainer","SimpleSnackBar","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","sortChange","MatSort","direction","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","sort","active","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","ngOnChanges","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","trigger","state","transition","animate","leftPointer","rightPointer","indicatorToggle","keyframes","opacity","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","(click)","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","CdkColumnDef","MatSortModule","MatStepLabel","TemplateRef","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","role","selected","optional","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","arguments","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","ctorParameters","MatVerticalStepper","MatStepperNext","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","sortHeaderId","isNaN","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","_data","_updateChangeSubscription","_paginator","paginator","empty","pageChange","page","_renderChangesSubscription","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","a","b","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","connect","disconnect","show","_setStyles","hide","inkBar","width","templateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","hasOwnProperty","TemplatePortal","_componentFactoryResolver","_host","attach","hasAttached","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","FocusMonitor","MatSlideToggle","labelPosition","ariaLabel","ariaLabelledby","required","checked","_inputElement","_ripple","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragging","applyCssTransform","dragX","dragPercentage","percentage","SlideToggleRenderer","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlider","multi","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","onTouched","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_focusHostElement","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","END","HOME","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","source","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","containerInstance","_overlayRef","_afterClosed","_afterOpened","_onAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","afterDismissed","asObservable","afterOpened","_onEnter","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","SHOW_ANIMATION","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","COMPLEX","snackBarState","action","[@contentFade]","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","take","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","_live","_breakpointObserver","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","_config","_applyConfigDefaults","_attach","announce","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","OverlayConfig","global","isRtl","radioGroup","MatRadioButton","_labelPosition","_disabled","_required","_uniqueId","focusVia","_markForCheck","_changeDetector","focusOrigin","_onInputFocusChange","_removeUniqueSelectionListener","MatRadioChange","_isRippleDisabled","_onInputClick","stopPropagation","_onInputChange","groupValueChanged","_touch","_focusRipple","fadeOut","launch","tslib_1.__assign","persistent","_rippleConfig","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","align","_MatRadioButtonMixinBase","MatRadioModule","MatRadioGroup","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","MAT_DRAWER_DEFAULT_AUTOSIZE","MatDrawerContent","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","MatDrawer","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","blur","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","DOCUMENT","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","ContentChildren","ContentChild","autosize","MatSidenavContent","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatSidenavContainer","MatSidenavModule","useValue","nextUniqueId","MatSlideToggleChange","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","_checked","centered","radius","_slideRenderer","_onChangeEvent","toggle","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","showDelay","hideDelay","tooltipClass","MatTooltip","TooltipComponent","_visibility","_closeOnInteraction","_transformOrigin","_onHide","delay","_hideTimeoutId","_showTimeoutId","afterHidden","isVisible","_setTransformOrigin","overlayPosition","overlayX","overlayY","getMatTooltipInvalidPositionError","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","touchendHideDelay","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","color","_bufferValue","MatProgressBar","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","_document","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_strokeWidth","diameter","newValue","strokeWidth","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","document","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroupBase","_MatRadioGroupMixinBase","_name","_isInitialized","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_radios","radio","isAlreadySelected","event_1","descendants","MatRadioButtonBase","_radioDispatcher","listen","newCheckedState","notify","rootNode","menu","focusFirstItem","MatMenuTrigger","_setMenuElevation","setElevation","depth","parentMenu","_resetMenu","_setIsMenuOpen","_openedByMouse","triggersSubmenu","_menuOpen","menuOpened","menuClosed","_menuItemInstance","_highlighted","_checkMenu","throwMatMenuMissingError","_portal","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","scrollStrategy","_scrollStrategy","_positionSubscription","onPositionChange","posX","connectionPair","posY","setPositionClasses","xPosition","originX","originFallbackX","_b","yPosition","overlayFallbackY","_c","originY","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","connectedTo","withDirection","withOffsetY","withFallbackPosition","_cleanUpSubscriptions","_closeSubscription","_hoverSubscription","_menuClosingActions","backdrop","parentClose","_parentMenu","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","openMenu","toggleMenu","aria-haspopup","(mousedown)","MAT_MENU_SCROLL_STRATEGY","MatMenu","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_DEFAULT_OPTIONS","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_setSelectionByValue","selectedOptions","viewValue","_isRtl","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","_keyManager","onKeydown","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","_scrollDispatcher","_ariaDescriber","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_tooltipInstance","_disposeTooltip","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","_createTooltip","ESCAPE","_handleTouchend","_getOrigin","overlay","_getOverlayPosition","strategy","main","fallback","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","scrollableViewProperties","isOverlayClipped","isDirectionLtr","_invertPosition","isLtr","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","matMenuAnimations","transformMenu","fadeInItems","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","_checkDisabled","_emitHoverEvent","getLabel","output","length_1","TEXT_NODE","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","resetActiveItem","newElevation","customElevation","c","_previousElevation","_startAnimation","_resetAnimation","_onAnimationDone","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","reason","_destroyMenu","closeMenu","_initMenu","menuOpen","_navList","_isNavList","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","_MatListItemMixinBase","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","_text","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","_getValidDateOrNull","oldDate","_dateAdapter","format","_dateFormats","display","dateInput","sameDate","_valueChange","MatDatepickerInput","deserialize","_validatorOnChange","_disabledChange","_datepicker","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","_localeSubscription","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","_formField","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","_lastValueValid","isValid","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","_template","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelBase","accordion","_uniqueSelectionDispatcher","_MatExpansionPanelMixinBase","expanded","_getExpandedState","_lazyContent","_inputChanges","MatExpansionPanel","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","Host","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keyup","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","_init","_selectedDate","_getDateInCurrentMonth","_todayDate","today","_monthLabel","getMonthNames","getMonth","activeDate","toLocaleUpperCase","firstOfMonth","createDate","getYear","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","dateFilter","dateA11yLabel","MatCalendarCell","_hasSameMonthAndYear","getDate","d1","d2","selectedChange","_userSelection","createMissingDateImplError","_activeDate","oldActiveDate","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","addCalendarDays","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_dateSelected","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","isAttached","completeClose","closedStream","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","Validators","compose","localeChanges","registerDatepicker","_registerInput","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","uniqueId","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_beforeClose","_locationChanges","_animationStateChanged","phaseName","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","selectedYear","selectedMonth","selectedDate","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","_keydown","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","setPreviousItemActive","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","MatButton","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","MAT_LABEL_GLOBAL_OPTIONS","MatError","[class.mat-right]","MatHint","MatPlaceholder","MatLabel","MatPrefix","MatSuffix","matFormFieldAnimations","transitionMessages","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocomplete","showPanel","_isOpen","displayWith","optionSelected","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_manuallyFloatingLabel","_escapeEventStream","_destroyPanel","autocomplete","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","optionSelections","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_scrollToOption","_handleInput","readOnly","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","aria-autocomplete","(focusin)","MatAutocompleteModule","DEFAULT_ROUND_BUTTON_COLOR","button","anchor","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","attributes","_i","attribute","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","block","defaultOptions","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","test","navigator","userAgent","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","getTime","NaN","setFullYear","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","IGNORE_MOUSE_EVENTS_TIMEOUT","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","ripple","VISIBLE","_containerElement","containerRect","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","RIPPLE_FADE_OUT_DURATION","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","MatOptionSelectionChange","_parent","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]"],"mappings":"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"}