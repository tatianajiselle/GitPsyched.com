{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/list/list.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {map} from 'rxjs/operators/map';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {\n  CanDisable,\n  ErrorStateMatcher,\n  CanUpdateErrorState,\n  mixinErrorState,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase = mixinDisableRipple(\n    mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel,\n    matSelectAnimations.fadeInContent\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when select has been touched */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Whether the panel's animation is done. */\n  _panelDoneAnimating: boolean = false;\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy = this._scrollStrategyFactory();\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the select is focused. */\n  focused: boolean = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n   /** Event emitted when the select has been opened. */\n   @Output() openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n   /** Event emitted when the select has been opened. */\n   @Output('opened')\n   get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /**\n   * Event emitted when the select has been opened.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the select has been closed.\n   * @deprecated Use `openedChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() onClose: Observable<void> = this._closedStream;\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() selectionChange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event emitted when the selected value has been changed by the user.\n   * @deprecated Use `selectionChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() change: EventEmitter<MatSelectChange> = this.selectionChange;\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) private _scrollStrategyFactory) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._panelOpen = true;\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  /**\n   * When the panel element is finished transforming in (though not fading in), it\n   * emits an event and focuses an option if the panel is open.\n   */\n  _onPanelDone(): void {\n    if (this.panelOpen) {\n      this._scrollTop = 0;\n      this.openedChange.emit(true);\n    } else {\n      this.openedChange.emit(false);\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * When the panel content is done fading in, the _panelDoneAnimating property is\n   * set so the proper class can be added to the panel.\n   */\n  _onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this.focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      this._clearSelection();\n\n      const correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n\n\n  /**\n   * Clears the select trigger and deselects every option in the list.\n   * @param skip Option that should not be deselected.\n   */\n  private _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withTypeAhead();\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => this.close());\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges\n      .pipe(takeUntil(changedOrDestroyed), filter(event => event.isUserInput))\n      .subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._keyManager.setActiveItem(this._getOptionIndex(option)!);\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._getOptionIndex(this._selectionModel.selected[0])!);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const itemHeight = this._getItemHeight();\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.options, this.optionGroups);\n    const scrollOffset = (activeOptionIndex + labelCount) * itemHeight;\n    const panelTop = this.panel.nativeElement.scrollTop;\n\n    if (scrollOffset < panelTop) {\n      this.panel.nativeElement.scrollTop = scrollOffset;\n    } else if (scrollOffset + itemHeight > panelTop + SELECT_PANEL_MAX_HEIGHT) {\n      this.panel.nativeElement.scrollTop =\n          Math.max(0, scrollOffset - SELECT_PANEL_MAX_HEIGHT + itemHeight);\n    }\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  get _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldPlaceholderFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  ConnectionPositionPair,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConfig,\n  OverlayConnectionPosition,\n  OverlayRef,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {merge} from 'rxjs/observable/merge';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options');\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.google.com/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tooltip-position')\n  get _positionDeprecated(): TooltipPosition { return this._position; }\n  set _positionDeprecated(value: TooltipPosition) { this._position = value; }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay =\n      this._defaultOptions ? this._defaultOptions.showDelay : 0;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay =\n      this._defaultOptions ? this._defaultOptions.hideDelay : 0;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, Function>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    private _platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions?: MatTooltipDefaultOptions) {\n\n    // TODO(crisbeto): make the `_defaultOptions` a required param next time we do breaking changes.\n    // @deletion-target 6.0.0\n\n    const element: HTMLElement = _elementRef.nativeElement;\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._manualListeners.set('mouseenter', () => this.show());\n      this._manualListeners.set('mouseleave', () => this.hide());\n\n      this._manualListeners\n        .forEach((listener, event) => _elementRef.nativeElement.addEventListener(event, listener));\n    } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS, because it will prevent users from typing in inputs. If\n      // we're on iOS and the tooltip is attached on an input or textarea, we clear\n      // the `user-select` to avoid these issues.\n      element.style.webkitUserSelect = element.style.userSelect = '';\n    }\n\n    _focusMonitor.monitor(element).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin !== 'program') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._manualListeners.forEach((listener, event) => {\n        this._elementRef.nativeElement.removeEventListener(event, listener);\n      });\n\n      this._manualListeners.clear();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(this._position, delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions ? this._defaultOptions.touchendHideDelay : 1500);\n  }\n\n  /** Create the tooltip to display */\n  private _createTooltip(): void {\n    const overlayRef = this._createOverlay();\n    const portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance;\n\n    // Dispose of the tooltip when the overlay is detached.\n    merge(this._tooltipInstance!.afterHidden(), overlayRef.detachments()).subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay\n      .position()\n      .connectedTo(this._elementRef, origin.main, overlay.main)\n      .withFallbackPosition(origin.fallback, overlay.fallback);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.onPositionChange.subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        } else {\n          // Otherwise recalculate the origin based on the new position.\n          this._tooltipInstance._setTransformOrigin(change.connectionPair);\n        }\n      }\n    });\n\n    const config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n\n  /** Disposes the current tooltip and the overlay it is attached to */\n  private _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. 'below' -> 'above').\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OriginConnectionPosition;\n\n    if (this.position == 'above' || this.position == 'below') {\n      position = {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isDirectionLtr ||\n               this.position == 'after' && !isDirectionLtr) {\n      position = {originX: 'start', originY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isDirectionLtr ||\n               this.position == 'before' && !isDirectionLtr) {\n      position = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.originX, position.originY);\n\n    return {\n      main: position,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    let position: OverlayConnectionPosition;\n\n    if (this.position == 'above') {\n      position = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (this.position == 'below') {\n      position = {overlayX: 'center', overlayY: 'top'};\n    } else if (this.position == 'left' ||\n               this.position == 'before' && isLtr ||\n               this.position == 'after' && !isLtr) {\n      position = {overlayX: 'end', overlayY: 'center'};\n    } else if (this.position == 'right' ||\n               this.position == 'after' && isLtr ||\n               this.position == 'before' && !isLtr) {\n      position = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(this.position);\n    }\n\n    const {x, y} = this._invertPosition(position.overlayX, position.overlayY);\n\n    return {\n      main: position,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** The transform origin used in the animation for showing and hiding the tooltip */\n  _transformOrigin: 'top' | 'bottom' | 'left' | 'right' = 'bottom';\n\n  /** Current position of the tooltip. */\n  private _position: TooltipPosition;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private _onHide: Subject<any> = new Subject();\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param position Position of the tooltip.\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._position = position;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  /** Sets the tooltip transform origin according to the position of the tooltip overlay. */\n  _setTransformOrigin(overlayPosition: ConnectionPositionPair) {\n    const axis = (this._position === 'above' || this._position === 'below') ? 'Y' : 'X';\n    const position = axis == 'X' ? overlayPosition.overlayX : overlayPosition.overlayY;\n\n    if (position === 'top' || position === 'bottom') {\n      this._transformOrigin = position;\n    } else if (position === 'start') {\n      this._transformOrigin = 'left';\n    } else if (position === 'end') {\n      this._transformOrigin = 'right';\n    } else {\n      throw getMatTooltipInvalidPositionError(this._position);\n    }\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.google.com/components/tooltips.html#tooltips-interaction\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material tabs. */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n    state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n    transition('* => left, * => right, left => center, right => center',\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matTabsAnimations} from './tabs-animations';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** A subscription to events for when the tab body begins centering. */\n  private _centeringSub: Subscription;\n  /** A subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub: Subscription;\n\n  constructor(\n    _componentFactoryResolver: ComponentFactoryResolver,\n    _viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(_componentFactoryResolver, _viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    if (this._host._isCenterPosition(this._host._position)) {\n      this.attach(this._host._content);\n    }\n    this._centeringSub = this._host._beforeCentering.subscribe((isCentering: boolean) => {\n      if (isCentering) {\n        if (!this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      }\n    });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    if (this._centeringSub && !this._centeringSub.closed) {\n      this._centeringSub.unsubscribe();\n    }\n\n    if (this._leavingSub && !this._leavingSub.closed) {\n      this._leavingSub.unsubscribe();\n    }\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit {\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n  _position: MatTabBodyPositionState;\n\n  /** The origin position from which this tab should appear when it is centered into view. */\n  @Input()\n  set origin(origin: number) {\n    if (origin == null) { return; }\n\n    const dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n  _origin: MatTabBodyOriginState;\n\n  constructor(private _elementRef: ElementRef,\n              @Optional() private _dir: Directionality) { }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n\n  _onTranslateTabStarted(e: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(e.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  _onTranslateTabComplete(e: AnimationEvent): void {\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this._onCentered.emit();\n    }\n\n    if (this._isCenterPosition(e.fromState) && !this._isCenterPosition(this._position)) {\n      this._afterLeavingCenter.emit();\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-dynamic-height')\n  get _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n  set _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() selectedIndexChange: EventEmitter<number> = new EventEmitter();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() focusChange: EventEmitter<MatTabChangeEvent> = new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  /**\n   * Event emitted when the tab selection has changed.\n   * @deprecated Use `selectedTabChange` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() selectChange: EventEmitter<MatTabChangeEvent> = this.selectedTabChange;\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super(elementRef);\n    this._groupId = nextId++;\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      const tabChangeEvent = this._createChangeEvent(indexToSelect);\n      this.selectedTabChange.emit(tabChangeEvent);\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._tabBodyWrapper.nativeElement.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, idx: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = idx;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The tab index that is focused. */\n  private _focusIndex: number = 0;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Combines listeners that will re-align the ink bar whenever they're invoked. */\n  private _realignInkBar = Subscription.EMPTY;\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n    this._realignInkBar = merge(dirChange, resize).subscribe(realign);\n  }\n\n  ngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Updating the view whether pagination should be enabled or not\n   */\n  _updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number { return this._focusIndex; }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /**\n   * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n   * Valid offsets are 1 and -1.\n   */\n  _moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n\n  /** Increment the focus index by 1 until a valid tab is found. */\n  _focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n\n  /** Decrement the focus index by 1 until a valid tab is found. */\n  _focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._tabList.nativeElement.style.transform = `translate3d(${translateX}px, 0, 0)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  private _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase = mixinColor(MatTabNavBase, 'primary');\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Whether ripples should be disabled for all links or not. */\n  @Input()\n  get disableRipple() { return this._disableRipple; }\n  set disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\n  private _disableRipple: boolean = false;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /** Notifies the component that the active link has been changed. */\n  updateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10)).pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n\n    this._setLinkDisableRipple();\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n\n  /** Sets the `disableRipple` property on each link of the navigation bar. */\n  private _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n    '(click)': '_handleClick($event)'\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  private _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  private _tabLinkRipple: RippleRenderer;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      this.rippleConfig = {\n        speedFactor: globalOptions.baseSpeedFactor,\n        animation: globalOptions.animation,\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n  }\n\n  /**\n   * Handles the click event, preventing default navigation if the tab link is disabled.\n   */\n  _handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase = mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': 'this._toolbarRows.length',\n    '[class.mat-toolbar-single-row]': '!this._toolbarRows.length'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = [].slice.call(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => node.textContent.trim());\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('5.1.0-a5ca9ce');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW, TAB} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {tap} from 'rxjs/operators/tap';\nimport {delay} from 'rxjs/operators/delay';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/common';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {defer} from 'rxjs/observable/defer';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _panelOpen: boolean = false;\n  private _componentDestroyed = false;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: ConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Stream of keyboard events that can close the panel. */\n  private _closeKeyEventStream = new Subject<void>();\n\n  /** View -> model callback called when value changes */\n  _onChange: (value: any) => void = () => {};\n\n  /** View -> model callback called when autocomplete has been touched */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  constructor(private _element: ElementRef, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any) {}\n\n  ngOnDestroy() {\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (this._panelOpen) {\n      this.autocomplete._isOpen = this._panelOpen = false;\n\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._panelOpen)),\n      this._closeKeyEventStream,\n      this._outsideClickStream,\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._panelOpen)) :\n          observableOf()\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )\n    .pipe(filter((event: MouseEvent | TouchEvent) => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  /**\n   * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the autocomplete is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the input. Implemented as a part of `ControlValueAccessor`.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n    // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n    if (this.panelOpen && (keyCode === ESCAPE || (keyCode === UP_ARROW && event.altKey))) {\n      this._resetActiveItem();\n      this._closeKeyEventStream.next();\n      event.stopPropagation();\n    } else if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._canOpen() && document.activeElement === event.target) {\n      this._onChange((event.target as HTMLInputElement).value);\n      this.openPanel();\n    }\n  }\n\n  _handleFocus(): void {\n    if (this._canOpen()) {\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const newScrollTop = optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT;\n      this.autocomplete._setScrollTop(Math.max(0, newScrollTop));\n    }\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.recalculateLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.updateSize({width: this._getHostWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._panelOpen = true;\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /** Reset active item to -1 so arrow events will activate the correct options. */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element: HTMLInputElement = this._element.nativeElement;\n    return !element.readOnly && !element.disabled;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/** Animations used by the Material expansion panel. */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '*'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '*'}\n    }),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {take} from 'rxjs/operators/take';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable()\nexport class MatSnackBar {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const _config = _applyConfigDefaults(config);\n    const snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(_config!.duration!));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component as the content of the snack bar container.\n   */\n  private _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const injector = this._createInjector(config, snackBarRef);\n    const portal = new ComponentPortal(component, undefined, injector);\n    const contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    return snackBarRef;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return {...new MatSnackBarConfig(), ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {LayoutModule} from '@angular/cdk/layout';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n    LayoutModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  Output,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortInvalidDirectionError,\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError\n} from './sort-errors';\nimport {Subject} from 'rxjs/Subject';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase = mixinDisabled(MatSortBase);\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase implements CanDisable, OnChanges, OnDestroy {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable()\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n\n  /** A label to describe the current sort (visible only to screenreaders). */\n  sortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/** Animations used by MatSort. */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly indicatorToggle: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('desc', style({transform: 'translateY(10px)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('asc', style({transform: 'rotate(-45deg)'})),\n    state('desc', style({transform: 'rotate(45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('asc', style({transform: 'rotate(45deg)'})),\n    state('desc', style({transform: 'rotate(-45deg)'})),\n    transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that moves the indicator in and out of view when sorting is enabled/disabled. */\n  indicatorToggle: trigger('indicatorToggle', [\n    transition('void => asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('asc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(-25%)', opacity: 0})\n    ]))),\n    transition('void => desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'translateY(-25%)', opacity: 0}),\n      style({transform: 'none', opacity: 1})\n    ]))),\n    transition('desc => void', animate(SORT_ANIMATION_TRANSITION, keyframes([\n      style({transform: 'none', opacity: 1}),\n      style({transform: 'translateY(25%)', opacity: 0})\n    ]))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {matSortAnimations} from './sort-animations';\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.indicatorToggle\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase implements MatSortable, CanDisable {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Optional() public _cdkColumnDef: CdkColumnDef) {\n\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n      .subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /** Handles click events on the header. */\n  _handleClick() {\n    if (!this._isDisabled()) {\n      this._sort.sort(this);\n    }\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {\n  constructor(template: TemplateRef<any>) {\n    super(template);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable()\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** Icon for the given step. */\n  @Input() icon: string;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Index of the given step. */\n  @Input()\n  get index(): number { return this._index; }\n  set index(value: number) { this._index = coerceNumberProperty(value); }\n  private _index: number;\n\n  /** Whether the given step is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n  private _selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input()\n  get active(): boolean { return this._active; }\n  set active(value: boolean) { this._active = coerceBooleanProperty(value); }\n  private _active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input()\n  get optional(): boolean { return this._optional; }\n  set optional(value: boolean) { this._optional = coerceBooleanProperty(value); }\n  private _optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    private _element: ElementRef,\n    changeDetectorRef: ChangeDetectorRef) {\n    _focusMonitor.monitor(_element.nativeElement, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material steppers. */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterContentInit,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  Optional,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {matStepperAnimations} from './stepper-animations';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by <ng-template matStepLabel>. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher) {\n    super(stepper);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader, {read: ElementRef}) _stepHeader: QueryList<ElementRef>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  ngAfterContentInit() {\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper { }\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(@Optional() dir: Directionality, changeDetectorRef: ChangeDetectorRef) {\n    super(dir, changeDetectorRef);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule, MatRippleModule, ErrorStateMatcher} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIntl} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    A11yModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n  providers: [MatStepperIntl, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef { }\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef { }\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef { }\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {\n}\n\n/** Header template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  preserveWhitespaces: false,\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  preserveWhitespaces: false,\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatCellDef, MatColumnDef, MatHeaderCell, MatHeaderCellDef} from './cell';\nimport {MatHeaderRow, MatHeaderRowDef, MatRow, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DataSource} from '@angular/cdk/table';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort} from '@angular/material/sort';\nimport {Subscription} from 'rxjs/Subscription';\nimport {combineLatest} from 'rxjs/operators/combineLatest';\nimport {map} from 'rxjs/operators/map';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {empty} from 'rxjs/observable/empty';\nimport {_isNumberValue} from '@angular/cdk/coercion';\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> implements DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription: Subscription;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value: any = data[sortHeaderId];\n    return _isNumberValue(value) ? Number(value) : value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA && valueB) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA) {\n        comparatorResult = 1;\n      } else if (valueB) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const accumulator = (currentTerm, key) => currentTerm + data[key];\n    const dataStr = Object.keys(data).reduce(accumulator, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // Otherwise, use an empty observable stream to take their place.\n    const sortChange = this._sort ? this._sort.sortChange : empty();\n    const pageChange = this._paginator ? this._paginator.page : empty();\n\n    if (this._renderChangesSubscription) {\n      this._renderChangesSubscription.unsubscribe();\n    }\n\n    // Watch for base data or filter changes to provide a filtered set of data.\n    this._renderChangesSubscription = this._data.pipe(\n      combineLatest(this._filter),\n      map(([data]) => this._filterData(data)),\n      // Watch for filtered data or sort changes to provide an ordered set of data.\n      combineLatest(sortChange.pipe(startWith(null!))),\n      map(([data]) => this._orderData(data)),\n      // Watch for ordered data or page changes to provide a paged set of data.\n      combineLatest(pageChange.pipe(startWith(null!))),\n      map(([data]) => this._pageData(data))\n    )\n    // Watched for paged data changes and send the result to the table to render.\n    .subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, NgZone} from '@angular/core';\n\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone) {}\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    inkBar.style.width = element ? (element.offsetWidth || 0) + 'px' : '0';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase = mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by <ng-template mat-tab-label>. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /** Template inside the MatTab view that contains an <ng-content>. */\n  @ViewChild(TemplateRef) _content: TemplateRef<any>;\n\n  /** The plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** The portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the label changes. */\n  _labelChange = new Subject<void>();\n\n  /** Emits whenever the disable changes */\n  _disableChange = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _slideRenderer: SlideToggleRenderer;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Reference to the focus state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the slide-toggle element is checked or not */\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() change: EventEmitter<MatSlideToggleChange> = new EventEmitter<MatSlideToggleChange>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple directive on the thumb container. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string) {\n\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back.\n    if (this._slideRenderer.dragging) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  _onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n\n  _onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      const newCheckedValue = this._slideRenderer.dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.checked = newCheckedValue;\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n\n  /** Reference to the thumb HTMLElement. */\n  private _thumbEl: HTMLElement;\n\n  /** Reference to the thumb bar HTMLElement. */\n  private _thumbBarEl: HTMLElement;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  dragPercentage: number;\n\n  /** Whether the thumb is currently being dragged. */\n  dragging: boolean = false;\n\n  constructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n\n  /** Initializes the drag of the slide-toggle. */\n  startThumbDrag(checked: boolean): void {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n\n  /** Resets the current drag and returns the new checked value. */\n  stopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n\n  /** Updates the thumb containers position from the specified distance. */\n  updateThumbPosition(distance: number): void {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    const dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  HasTabIndex,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {Subscription} from 'rxjs/Subscription';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase =\n  mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('thumb-label')\n  get _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n  set _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('tick-interval')\n  get _tickIntervalDeprecated() { return this.tickInterval; }\n  set _tickIntervalDeprecated(v) { this.tickInterval = v; }\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    let sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundLabelTo: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to eb triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /** Message to be announced by the MatAriaLiveAnnouncer */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /**\n   * Extra CSS classes to be added to the snack bar container.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  extraClasses?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction = 'ltr';\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** @docs-private */\nexport const SHOW_ANIMATION =\n  `${AnimationDurations.ENTERING} ${AnimationCurves.DECELERATION_CURVE}`;\n\n/** @docs-private */\nexport const HIDE_ANIMATION =\n  `${AnimationDurations.EXITING} ${AnimationCurves.ACCELERATION_CURVE}`;\n\n/** Animations used by the Material snack bar. */\nexport const matSnackBarAnimations: {\n  readonly contentFade: AnimationTriggerMetadata;\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  contentFade: trigger('contentFade', [\n    transition(':enter', [\n      style({opacity: '0'}),\n      animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.STANDARD_CURVE}`)\n    ])\n  ]),\n\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('visible-top, visible-bottom', style({transform: 'translateY(0%)'})),\n    transition('visible-top => hidden-top, visible-bottom => hidden-bottom',\n      animate(HIDE_ANIMATION)),\n    transition('void => visible-top, void => visible-bottom', animate(SHOW_ANIMATION)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matSnackBarAnimations.contentFade],\n  host: {\n    '[@contentFade]': '',\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: { message: string, action: string };\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\nimport {matSnackBarAnimations} from './snack-bar-animations';\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** The snack bar configuration. */\n  snackBarConfig: MatSnackBarConfig;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (this.snackBarConfig.panelClass || this.snackBarConfig.extraClasses) {\n      this._setCssClasses(this.snackBarConfig.panelClass);\n      this._setCssClasses(this.snackBarConfig.extraClasses);\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = `visible-${this.snackBarConfig.verticalPosition}`;\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    this._animationState = `hidden-${this.snackBarConfig.verticalPosition}`;\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the user-specified list of CSS classes to the element. */\n  private _setCssClasses(classList: undefined|string|string[]) {\n    if (!classList) {\n      return;\n    }\n\n    const element = this._elementRef.nativeElement;\n\n    if (Array.isArray(classList)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      classList.forEach(cssClass => element.classList.add(cssClass));\n    } else {\n      element.classList.add(classList);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  /** The MatRadioButton that emits the change event. */\n  source: MatRadioButton | null;\n  /** The value of the MatRadioButton. */\n  value: any;\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n  /**\n   * Selected value for group. Should equal the value of the selected radio button if there *is*\n   * a corresponding radio button with a matching value. If there is *not* such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /**\n   * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /** Value of the radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /** Whether the radio button is selected. */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether or not the radio-button should appear before or after the label.\n   * @deprecated\n   * @deletion-target\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** The child ripple instance. */\n  @ViewChild(MatRipple) _ripple: MatRipple;\n\n  /** Reference to the current focus ripple. */\n  private _focusRipple: RippleRef | null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    const event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the Material drawers. */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    state('open, open-instant', style({\n      transform: 'translate3d(0, 0, 0)',\n      visibility: 'visible',\n    })),\n    state('void', style({\n      visibility: 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {merge} from 'rxjs/observable/merge';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {debounceTime} from 'rxjs/operators/debounceTime';\nimport {map} from 'rxjs/operators/map';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {CdkScrollable} from '@angular/cdk/scrolling';\n\n\n/** Throws an exception when two MatDrawer are matching the same position. */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/**\n * Drawer toggle promise result.\n * @deprecated\n * @deletion-target 6.0.0\n */\nexport class MatDrawerToggleResult {\n  constructor(\n    /** Whether the drawer is opened or closed. */\n    public type: 'open' | 'close',\n    /** Whether the drawer animation is finished. */\n    public animationFinished: boolean) {}\n}\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE');\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContent implements AfterContentInit {\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _margins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) private _container: MatDrawerContainer) {\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' { return this.position; }\n  set align(value: 'start' | 'end') { this.position = value; }\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer is opened. */\n  private _opened: boolean = false;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new EventEmitter<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /**\n   * Event emitted when the drawer is fully opened.\n   * @deprecated Use `opened` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('open') onOpen: Observable<void> = this._openedStream;\n\n  /**\n   * Event emitted when the drawer is fully closed.\n   * @deprecated Use `closed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('close') onClose: Observable<void> = this._closedStream;\n\n  /** Event emitted when the drawer's position changes. */\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Output('align-changed') onAlignChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(v: boolean) { this.toggle(coerceBooleanProperty(v)); }\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<void> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<void> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<void> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    // @deletion-target 6.0.0\n    return new Promise<any>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => {\n        resolve(new MatDrawerToggleResult(open ? 'open' : 'close', true));\n      });\n    });\n  }\n\n  /**\n   * Handles the keyboard events.\n   * @docs-private\n   */\n  handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStarted.emit(event);\n  }\n\n  _onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n        (toState === 'void' && fromState.indexOf('open') === 0)) {\n      this.openedChange.emit(this._opened);\n    }\n  }\n\n  get _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * <mat-drawer-container> component.\n *\n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() backdropClick = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private _doCheckSubject = new Subject<void>();\n\n  _contentMargins = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  @ViewChild(CdkScrollable) scrollable: CdkScrollable;\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (!this._dir || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end!.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._start!.mode != 'side')\n        || (this._isDrawerOpen(this._end) && this._end!.mode != 'side');\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // Pull back into the NgZone since in some cases we could be outside.\n    this._ngZone.run(() => this._contentMargins.next({left, right}));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_margins.left',\n    '[style.margin-right.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  template: '<ng-content></ng-content>',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart($event)',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {ScrollDispatchModule} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nimport {\n  MatDrawer,\n  MatDrawerContainer,\n  MatDrawerContent,\n  MAT_DRAWER_DEFAULT_AUTOSIZE,\n} from './drawer';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    A11yModule,\n    OverlayModule,\n    ScrollDispatchModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  providers: [\n    {provide: MAT_DRAWER_DEFAULT_AUTOSIZE, useValue: false}\n  ]\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n  MAT_TOOLTIP_DEFAULT_OPTIONS,\n  MatTooltip,\n  TooltipComponent,\n} from './tooltip';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER,\n    ARIA_DESCRIBER_PROVIDER,\n    {\n      provide: MAT_TOOLTIP_DEFAULT_OPTIONS,\n      useValue: {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500\n      }\n    }\n  ],\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input() hidePageSize = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\nexport const _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n\n\n/**\n * <mat-progress-bar> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor {\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) { this._value = clamp(v || 0); }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.1%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.01%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.51%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * <mat-progress-spinner> component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor,\n  OnChanges {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** The width and height of the host element. Will grow with stroke width. */\n  _elementSize = BASE_SIZE;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n    this._updateElementSize();\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.strokeWidth || changes.diameter) {\n      this._updateElementSize();\n    }\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this._elementSize * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n\n  /** Updates the spinner element size based on its diameter. */\n  private _updateElementSize() {\n    this._elementSize = this._diameter + Math.max(this.strokeWidth - BASE_STROKE_WIDTH, 0);\n  }\n}\n\n\n/**\n * <mat-spinner> component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[style.width.px]': '_elementSize',\n    '[style.height.px]': '_elementSize',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any) {\n    super(elementRef, platform, document);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _positionSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  private _openedByMouse: boolean = false;\n\n  /**\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor') menu: MatMenuPanel;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              private _focusMonitor?: FocusMonitor) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this._destroyMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.closed.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = this._parentMenu._hovered()\n          .pipe(filter(active => active === this._menuItemInstance))\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element.nativeElement, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._closeSubscription.unsubscribe();\n      this._overlayRef.detach();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedByMouse ? 'mouse' : 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedByMouse) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus('mouse');\n    }\n\n    this._openedByMouse = false;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as ConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n\n  /**\n   * This method builds the position strategy for the overlay, so the menu is properly connected\n   * to the trigger.\n   * @returns ConnectedPositionStrategy\n   */\n  private _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY},\n            undefined, -offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY},\n            undefined, -offsetY);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.close : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MAT_MENU_DEFAULT_OPTIONS, MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_SCROLL_STRATEGY_PROVIDER, MatMenuTrigger} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        minWidth: '100%',\n        transform: 'scaleY(0)'\n      }),\n      animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n    ]),\n    transition('* => void', [\n      animate('250ms 100ms linear', style({opacity: 0}))\n    ])\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER, ErrorStateMatcher]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatTooltip. */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase =\n  mixinTabIndex(mixinDisableRipple(mixinDisabled(MatSelectionListBase)));\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/**\n * Change event object emitted by MatListOption whenever the selected state changes.\n * @deprecated Use the `MatSelectionListChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class MatListOptionChange {\n  constructor(\n    /** Reference to the list option that changed. */\n    public source: MatListOption,\n    /** The new selected state of the option. */\n    public selected: boolean) {}\n}\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-focus]': '_hasFocus',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _lineSetter: MatLineSetter;\n  private _selected: boolean = false;\n  private _disabled: boolean = false;\n\n  /** Whether the option has focus. */\n  _hasFocus: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  /**\n   * Emits a change event whenever the selected state of an option changes.\n   * @deprecated Use the `selectionChange` event on the `<mat-selection-list>` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() selectionChange: EventEmitter<MatListOptionChange> =\n    new EventEmitter<MatListOptionChange>();\n\n  constructor(private _element: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */ @Optional() @Inject(forwardRef(() => MatSelectionList))\n              public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this._selected) {\n      // List options that are selected at initialization can't be reported properly to the form\n      // control. This is because it takes some time until the selection-list knows about all\n      // available options. Also it can happen that the ControlValueAccessor has an initial value\n      // that should be used instead. Deferring the value change report to the next tick ensures\n      // that the form control value is not being overwritten.\n      Promise.resolve().then(() => this.selected = true);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    this.selectionList._removeOptionFromList(this);\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n\n      // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n      this._emitDeprecatedChangeEvent();\n    }\n  }\n\n  _handleFocus() {\n    this._hasFocus = true;\n    this.selectionList._setFocusedOption(this);\n  }\n\n  _handleBlur() {\n    this._hasFocus = false;\n    this.selectionList._onTouched();\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. */\n  _setSelected(selected: boolean) {\n    if (selected === this._selected) {\n      return;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n  }\n\n  /** Emits a selectionChange event for this option. */\n  _emitDeprecatedChangeEvent() {\n    // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n    this.selectionChange.emit(new MatListOptionChange(this, this.selected));\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisable, CanDisableRipple, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n    super();\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap().withTypeAhead();\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n  }\n\n  /** Focus the selection-list. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this.options.forEach(option => option._setSelected(true));\n    this._reportValueChange();\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this.options.forEach(option => option._setSelected(false));\n    this._reportValueChange();\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /** Removes an option from the selection list and updates the active item. */\n  _removeOptionFromList(option: MatListOption) {\n    if (option._hasFocus) {\n      const optionIndex = this._getOptionIndex(option);\n\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.setPreviousItemActive();\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.setNextItemActive();\n      }\n    }\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                                 this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    if (this.options) {\n      this.options.forEach(option => option.disabled = isDisabled);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Returns the option with the specified value. */\n  private _getOptionByValue(value: string): MatListOption | undefined {\n    return this.options.find(option => option.value === value);\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values\n      .map(value => this._getOptionByValue(value))\n      .filter(Boolean)\n      .forEach(option => option!._setSelected(true));\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the selected state of the currently focused option. */\n  private _toggleSelectOnFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        focusedOption._emitDeprecatedChangeEvent();\n      }\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    // TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\n    state('void', style({\n      opacity: 0,\n      // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n      // as of 4.2, which causes the animation to be skipped if it starts from 0.\n      transform: 'scale(0.01, 0.01)'\n    })),\n    state('enter-start', style({\n      opacity: 1,\n      transform: 'scale(1, 0.5)'\n    })),\n    state('enter', style({\n      transform: 'scale(1, 1)'\n    })),\n    transition('void => enter-start', animate('100ms linear')),\n    transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @deletion-target 7.0.0\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {DOCUMENT} from '@angular/common';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor) {\n\n    // @deletion-target 6.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._getHostElement(), false);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._getHostElement());\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _emitHoverEvent() {\n    if (!this.disabled) {\n      this._hovered.next(this);\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {switchMap} from 'rxjs/operators/switchMap';\nimport {take} from 'rxjs/operators/take';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {matMenuAnimations} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusOrigin} from '@angular/cdk/a11y';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  exportAs: 'matMenu'\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /** List of the items inside of a menu. */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() closed: EventEmitter<void | 'click' | 'keydown'>\n      = new EventEmitter<void | 'click' | 'keydown'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @deletion-target 6.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    if (this.items) {\n      return this.items.changes.pipe(\n        startWith(this.items),\n        switchMap(items => merge(...items.map(item => item._hovered)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this._hovered()));\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // TODO(crisbeto): make the origin required when doing breaking changes.\n    this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * It's necessary to set position-based classes to ensure the menu panel animation\n   * folds out from the correct direction.\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase = mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _lineSetter: MatLineSetter;\n  private _isNavList: boolean = false;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  @ContentChild(MatListAvatarCssMatStyler)\n  set _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._element.nativeElement.classList.add('mat-list-item-avatar');\n    } else {\n      this._element.nativeElement.classList.remove('mat-list-item-avatar');\n    }\n  }\n\n  constructor(private _element: ElementRef,\n              @Optional() private _navList: MatNavList) {\n    super();\n    this._isNavList = !!_navList;\n  }\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._navList.disableRipple;\n  }\n\n  _handleFocus() {\n    this._element.nativeElement.classList.add('mat-list-item-focus');\n  }\n\n  _handleBlur() {\n    this._element.nativeElement.classList.remove('mat-list-item-focus');\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n\n  private registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    let oldDate = this.value;\n    this._value = value;\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() dateChange: EventEmitter<MatDatepickerInputEvent<D>>\n      = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() dateInput: EventEmitter<MatDatepickerInputEvent<D>>\n      = new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D|null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n\n  /**\n   * Determines the offset to be used when the calendar goes into a fallback position.\n   * Primarily used to prevent the calendar from overlapping the input.\n   */\n  _getPopupFallbackOffset(): number {\n    return this._formField ? -this._formField._inputContainerRef.nativeElement.clientHeight : 0;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  Directive,\n  ContentChild,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  constructor(public _intl: MatDatepickerIntl, private _changeDetectorRef: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatDivider,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDivider,\n  ],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * The display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the reset of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewContainerRef,\n  AfterContentInit,\n  ContentChild,\n} from '@angular/core';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {Subject} from 'rxjs/Subject';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {MatAccordion} from './accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {matExpansionAnimations} from './expansion-animations';\n\n// Boilerplate for applying mixins to MatExpansionPanel.\n/** @docs-private */\n@Component({\n  template: '',\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatExpansionPanelBase extends CdkAccordionItem {\n  constructor(accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * <mat-expansion-panel>\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MdAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: _MatExpansionPanelMixinBase, useExisting: forwardRef(() => MatExpansionPanel)}\n  ],\n})\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase\n    implements CanDisable, AfterContentInit, OnChanges, OnDestroy {\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** Stream that emits for changes in `@Input` properties. */\n  _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordion;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  constructor(@Optional() @Host() accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n\n  /** Whether the expansion indicator should be hidden. */\n  _getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._inputChanges.complete();\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatExpansionPanel} from './expansion-panel';\nimport {matExpansionAnimations} from './expansion-animations';\n\n\n/**\n * <mat-expansion-panel-header>\n *\n * This component corresponds to the header element of an <mat-expansion-panel>.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n    @Host() public panel: MatExpansionPanel,\n    private _element: ElementRef,\n    private _focusMonitor: FocusMonitor,\n    private _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement);\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\n}\n\n/**\n * <mat-panel-description>\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * <mat-panel-title>\n *\n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelActionRow,\n  MatExpansionPanelBase\n} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, A11yModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatExpansionPanelBase,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(private _element: ElementRef) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = coerceToNumber(value); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = coerceToNumber(value); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    this._element.nativeElement.style[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridTileText implements AfterContentInit {\n  /**\n   *  Helper that watches the number of lines in a text area and sets\n   * a class on the host element that matches the line count.\n   */\n  _lineSetter: MatLineSetter;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef) {}\n\n  ngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    let lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  constructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number);\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList);\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <mat-grid-list cols=\"3\" rowHeight=\"100px\">\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <mat-grid-list cols=\"3\" rowHeight=\"3:1\">\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <mat-grid-list cols=\"3\" rowHeight=\"fit\">\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatGridList implements OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef, @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) { this._cols = coerceToNumber(value); }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = coerceToString(value); }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  set rowHeight(value: string | number) {\n    const newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    const tracker = new TileCoordinator(this.cols, this._tiles);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new date is selected. */\n  @Output() selectedChange = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit(): void {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, true);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    this._activeDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(@Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    let daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {take} from 'rxjs/operators/take';\nimport {Subscription} from 'rxjs/Subscription';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage, yearsPerRow} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy, OnChanges {\n  private _intlChanges: Subscription;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when the currently selected date changes. */\n  @Output() selectedChange = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() _userSelection = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /** Date filter for the month, year, and multi-year views. */\n  _dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get _activeDate(): D { return this._clampedActiveDate; }\n  set _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  _currentView: 'month' | 'year' | 'multi-year';\n\n  /** The label for the current calendar view. */\n  get _periodButtonText(): string {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n          .toLocaleUpperCase();\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYearName(this._activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get _periodButtonLabel(): string {\n    return this._currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get _prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this._currentView];\n  }\n\n  /** The label for the the next button. */\n  get _nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this._currentView];\n  }\n\n  constructor(private _elementRef: ElementRef,\n              private _intl: MatDatepickerIntl,\n              private _ngZone: NgZone,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir?: Directionality) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._currentView = this.startView;\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this.monthView || this.yearView || this.multiYearView;\n\n      if (view) {\n        view._init();\n      }\n    }\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles month selection in the multi-year view. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this._activeDate = date;\n    this._currentView = view;\n  }\n\n  /** Handles user clicks on the period label. */\n  _currentPeriodClicked(): void {\n    this._currentView = this._currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  _previousClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? -1 : -yearsPerPage);\n  }\n\n  /** Handles user clicks on the next button. */\n  _nextClicked(): void {\n    this._activeDate = this._currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(\n            this._activeDate, this._currentView == 'year' ? 1 : yearsPerPage);\n  }\n\n  /** Whether the previous period button is enabled. */\n  _previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  _nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n\n  /** Handles keydown events on the calendar body. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._currentView == 'month') {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else if (this._currentView == 'year') {\n      this._handleCalendarBodyKeydownInYearView(event);\n    } else {\n      this._handleCalendarBodyKeydownInMultiYearView(event);\n    }\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this._currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this._currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  private _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          this._userSelected();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  private _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'month');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  private _handleCalendarBodyKeydownInMultiYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n        this._goToDateInView(this._activeDate, 'year');\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take} from 'rxjs/operators/take';\nimport {filter} from 'rxjs/operators/filter';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatCalendar} from './calendar';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  ngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatDatepicker<D> implements OnDestroy {\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(date: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(date));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' = 'month';\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits new selected date when selected date changes.\n   * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n   * @deletion-target 6.0.0\n   */\n  @Output() selectedChanged: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(shouldOpen: boolean) { shouldOpen ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  private _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<any> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  _disabledChange = new Subject<boolean>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) private _scrollStrategy,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n\n  /** Selects the given date */\n  _select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    const fallbackOffset = this._datepickerInput._getPopupFallbackOffset();\n\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'start', originY: 'top'},\n        {overlayX: 'start', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'top'},\n        {overlayX: 'end', overlayY: 'bottom'},\n        undefined,\n        fallbackOffset\n      );\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.slideDialog],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_config?.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config?.ariaLabel',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** The dialog configuration. */\n  _config: MatDialogConfig;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Move focus onto the dialog immediately in order to prevent the user from accidentally\n      // opening multiple dialogs at the same time. Needs to be async, because the element\n      // may not be focusable immediately.\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Location} from '@angular/common';\nimport {filter} from 'rxjs/operators/filter';\nimport {take} from 'rxjs/operators/take';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription, ISubscription} from 'rxjs/Subscription';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private _afterOpen = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private _beforeClose = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  /** Subscription to changes in the user's location. */\n  private _locationChanges: ISubscription = Subscription.EMPTY;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpen.next();\n      this._afterOpen.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._locationChanges.unsubscribe();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n\n    if (location) {\n      // Close the dialog when the user goes forwards/backwards in history or when the location\n      // hash changes. Note that this usually doesn't include clicking on links (unless the user\n      // is using the `HashLocationStrategy`).\n      this._locationChanges = location.subscribe(() => {\n        if (this._containerInstance._config.closeOnNavigation) {\n          this.close();\n        }\n      });\n    }\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClose.next(dialogResult);\n      this._beforeClose.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this._beforeClose.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = 'auto', height: string = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  ScrollStrategy,\n  OverlayContainer,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private _afterAllClosedAtThisLevel = new Subject<void>();\n  private _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n\n  get _afterAllClosed() {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) private _scrollStrategy,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {}\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef =\n        this._attachDialogContent<T>(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    let i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes.  To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n    injectionTokens.set(Directionality, {\n      value: config.direction,\n      change: observableOf()\n    });\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatDialog,\n  MAT_DIALOG_SCROLL_STRATEGY_PROVIDER\n} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {catchError} from 'rxjs/operators/catchError';\nimport {tap} from 'rxjs/operators/tap';\nimport {finalize} from 'rxjs/operators/finalize';\nimport {map} from 'rxjs/operators/map';\nimport {share} from 'rxjs/operators/share';\nimport {\n  Injectable,\n  Inject,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\nimport {DOCUMENT} from '@angular/common';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n  constructor(public url: SafeResourceUrl) { }\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable()\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document?: any) {\n      // TODO(crisbeto): make _document required next major release.\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const config = new SvgIconConfig(url);\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the <mat-icon> element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg))\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg))\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: any): Observable<SVGElement | null> => {\n            let url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          }),\n          tap(svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // TODO: Document that icons should only be loaded from trusted sources.\n    return this._fetchUrl(config.url).pipe(map(svgText => this._svgElementFromString(svgText)));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.id = '';\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    if (this._document || typeof document !== 'undefined') {\n      const div = (this._document || document).createElement('DIV');\n      div.innerHTML = str;\n      const svg = div.querySelector('svg') as SVGElement;\n      if (!svg) {\n        throw Error('<svg> tag not found');\n      }\n      return svg;\n    }\n\n    throw new Error('MatIconRegistry could not resolve document.');\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share()\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>]\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators/take';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase = mixinColor(MatIconBase);\n\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  constructor(\n      elementRef: ElementRef,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    const childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let i = 0; i < childCount; i++) {\n      layoutElement.removeChild(layoutElement.childNodes[i]);\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  DoCheck,\n  OnDestroy,\n  NgZone,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {auditTime} from 'rxjs/operators/auditTime';\nimport {takeUntil} from 'rxjs/operators/takeUntil';\nimport {Subject} from 'rxjs/Subject';\n\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\n@Directive({\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    'class': 'mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n})\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck, OnDestroy {\n  /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n  private _previousValue: string;\n  private _destroyed = new Subject<void>();\n\n  private _minRows: number;\n  private _maxRows: number;\n\n  /** Minimum amount of rows in the textarea. */\n  @Input('matAutosizeMinRows')\n  set minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n  get minRows(): number { return this._minRows; }\n\n  /** Maximum amount of rows in the textarea. */\n  @Input('matAutosizeMaxRows')\n  get maxRows(): number { return this._maxRows; }\n  set maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n\n  /** Cached height of a textarea with a single row. */\n  private _cachedLineHeight: number;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _platform: Platform,\n    private _ngZone?: NgZone) {}\n\n  // TODO(crisbeto): make the `_ngZone` a required param in the next major version.\n\n  /** Sets the minimum height of the textarea as determined by minRows. */\n  _setMinHeight(): void {\n    const minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n\n  /** Sets the maximum height of the textarea as determined by maxRows. */\n  _setMaxHeight(): void {\n    const maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n\n      if (this._ngZone) {\n        this._ngZone.runOutsideAngular(() => {\n          fromEvent(window, 'resize')\n            .pipe(auditTime(16), takeUntil(this._destroyed))\n            .subscribe(() => this.resizeToFitContent(true));\n        });\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Sets a style property on the textarea element. */\n  private _setTextareaStyle(property: string, value: string): void {\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    textarea.style[property] = value;\n  }\n\n  /**\n   * Cache the height of a single-row textarea if it has not already been cached.\n   *\n   * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n   * maxRows. For the initial version, we will assume that the height of a single line in the\n   * textarea does not ever change.\n   */\n  private _cacheTextareaLineHeight(): void {\n    if (this._cachedLineHeight) {\n      return;\n    }\n\n    let textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n\n    // Use a clone element because we have to override some styles.\n    let textareaClone = textarea.cloneNode(false) as HTMLTextAreaElement;\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden';\n\n    textarea.parentNode!.appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight;\n    textarea.parentNode!.removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n\n  ngDoCheck() {\n    if (this._platform.isBrowser) {\n      this.resizeToFitContent();\n    }\n  }\n\n  /**\n   * Resize the textarea to fit its content.\n   * @param force Whether to force a height recalculation. By default the height will be\n   *    recalculated only if the value changed since the last call.\n   */\n  resizeToFitContent(force: boolean = false) {\n    this._cacheTextareaLineHeight();\n\n    // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n    // in checking the height of the textarea.\n    if (!this._cachedLineHeight) {\n      return;\n    }\n\n    const textarea = this._elementRef.nativeElement as HTMLTextAreaElement;\n    const value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue && !force) {\n      return;\n    }\n\n    const placeholderText = textarea.placeholder;\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n    // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n    // need to be removed temporarily.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n    textarea.placeholder = '';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n    textarea.placeholder = placeholderText;\n\n    this._previousValue = value;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs/Subject';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase = mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput]`,\n  exportAs: 'matInput',\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[readonly]': 'readonly',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n  /** Variables used as cache for getters and setters. */\n  protected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _readonly = false;\n  private _inputValueAccessor: {value: any};\n\n  /** Whether the input is focused. */\n  focused = false;\n\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /**\n   * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n   * needs to run change detection.\n   */\n  stateChanges = new Subject<void>();\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-input';\n\n  /** Whether the element is disabled. */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n\n  /** Placeholder attribute of the element. */\n  @Input() placeholder: string = '';\n\n  /** Whether the element is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** The input element's value. */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(protected _elementRef: ElementRef,\n              protected _platform: Platform,\n              @Optional() @Self() public ngControl: NgControl,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  focus() { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. If not recognizable it returns false. */\n  protected _isTextarea() {\n    let nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n\n  // Implemented as part of MatFormFieldControl.\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return this.focused || !this.empty; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() { this.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable()\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'attr.aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** Whether to allow selection of disabled cells. */\n  @Input() allowDisabledSelection = false;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() selectedValueChange = new EventEmitter<number>();\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  private _required: boolean;\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /**\n   * Whether or not the checkbox should appear before or after the label.\n   * @deprecated\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n  set align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() change: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\"> element */\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _checked: boolean = false;\n\n  private _indeterminate: boolean = false;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Reference to the focused state ripple. */\n  private _focusRipple: RippleRef | null;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked() { return this._checked; }\n  set checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate() { return this._indeterminate; }\n  set indeterminate(indeterminate: boolean) {\n    let changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Function to be called on change.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be triggered when the checkbox is touched.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the checkbox should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n    }\n  }\n\n  private _emitChangeEvent() {\n    let event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Function is called whenever the focus changes for the input element. */\n  private _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this.ripple.launch(0, 0, {persistent: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /** Fades out the focus state ripple. */\n  private _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n\n\n/**\n * Dummy directive to add CSS class to basic chips.\n * @docs-private\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n})\nexport class MatBasicChip {\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n  /** The value of the chip. Defaults to the content inside <mat-chip> tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(newValue: any) {\n    this._value = newValue;\n  }\n\n  /**\n   * Whether or not the chips are selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (remove) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n\n  /** Emits when the chip is focused. */\n  _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() selectionChange: EventEmitter<MatChipSelectionChange>\n      = new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() destroyed = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when the chip is destroyed.\n   * @deprecated Use 'destroyed' instead.\n   * @deletion-target 6.0.0\n   */\n  @Output() destroy: EventEmitter<MatChipEvent> = this.destroyed;\n\n  /** Emitted when a chip is to be removed. */\n  @Output() removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /**\n   * Emitted when a chip is to be removed.\n   * @deprecated Use `removed` instead.\n   * @deletion-target 6.0.0\n   */\n  @Output('remove') onRemove: EventEmitter<MatChipEvent> = this.removed;\n\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef) {\n    super(_elementRef);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Ensures events fire properly upon click. */\n  _handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick()',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {\n  }\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormGroupDirective,\n  NgControl,\n  NgForm\n} from '@angular/forms';\nimport {ErrorStateMatcher, mixinErrorState, CanUpdateErrorState} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase = mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  readonly controlType = 'mat-chip-list';\n\n  /** When a chip is destroyed, we track the index so we can focus the appropriate next chip. */\n  protected _lastDestroyedIndex: number|null = null;\n\n  /** Track which chips we're listening to for focus/destruction. */\n  protected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n\n  /** Subscription to tabbing out from the chip list. */\n  private _tabOutSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the chip list. */\n  private _changeSubscription: Subscription;\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription|null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription|null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription|null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription|null;\n\n  /** Whether or not the chip is selectable. */\n  protected _selectable: boolean = true;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipInput;\n\n  /** Id of the chip list */\n  protected _id: string;\n\n  /** Uid of the chip list */\n  protected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** Whether this is required */\n  protected _required: boolean = false;\n\n  /** Whether this is disabled */\n  protected _disabled: boolean = false;\n\n  protected _value: any;\n\n  /** Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput */\n  protected _placeholder: string;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  get role(): string|null {\n    return this.empty ? null : 'listbox';\n  }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Required for FormFieldControl */\n  @Input()\n  get value() { return this._value; }\n  set value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n\n  /** Required for FormFieldControl. The ID of the chip list */\n  @Input()\n  get id(): string { return this._id || this._uid; }\n  set id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n\n  /** Required for FormFieldControl. Whether the chip list is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** For FormFieldControl. Use chip input's placholder if there's a chip input */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n\n  /** Whether this chip-list contains no chips and no matChipInput. */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /** @docs-private */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /** Whether this chip-list is disabled. */\n  @Input()\n  get disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip is selectable. When a chip is not selectable,\n   * its selected state is always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() change: EventEmitter<MatChipListChange> = new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = this.chips.changes.pipe(startWith(null)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n    this.stateChanges.complete();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor\n  setDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._elementRef.nativeElement.disabled = disabled;\n    this.stateChanges.next();\n  }\n\n  /** @docs-private */\n  onContainerClick() {\n    this.focus();\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    let code = event.keyCode;\n    let target = event.target as HTMLElement;\n    let isInputEmpty = this._isInputEmpty(target);\n    let isRtl = this._dir && this._dir.value == 'rtl';\n\n    let isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let isBackKey = code === BACKSPACE;\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * Update key manager's active item when chip is deleted.\n   * If the deleted chip is the last chip in chip list, focus the new last chip.\n   * Otherwise focus the next chip in the list.\n   * Save `_lastDestroyedIndex` so we can set the correct focus.\n   */\n  protected _updateKeyManager(chip: MatChip) {\n    let chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n   * one.\n   */\n  protected _updateFocusForDestroyedChips() {\n    let chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        const correspondingChipIndex = this.chips.toArray().indexOf(correspondingChip);\n\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChipIndex);\n        } else {\n          this._keyManager.updateActiveItemIndex(correspondingChipIndex);\n        }\n\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n  }\n})\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n  @Input('matChipInputSeparatorKeyCodes') separatorKeyCodes: number[] = [ENTER];\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Whether the input is empty. */\n  get empty(): boolean {\n    let value: string | null = this._inputElement.value;\n    return (value == null || value === '');\n  }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  focus(): void { this._inputElement.focus(); }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\n\n\n@NgModule({\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip],\n  providers: [ErrorStateMatcher]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking outside to close a modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction = 'ltr';\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by MatDialog. */\nexport const matDialogAnimations: {\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides the dialog in and out of view and fades the opacity. */\n  slideDialog: trigger('slideDialog', [\n    // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n    // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n    // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n    // solves both issues.\n    state('enter', style({ transform: 'none', opacity: 1 })),\n    state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n    state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n    transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\n\n\n// TODO(kara): Convert attribute selectors to classes when attr maps become available\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n})\nexport class MatButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n})\nexport class MatRaisedButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n})\nexport class MatIconButtonCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n})\nexport class MatFab {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n})\nexport class MatMiniFab {}\n\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  _isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  _isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor) {\n    super(elementRef);\n\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n\n    if (this._isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  constructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef) {\n    super(elementRef, platform, focusMonitor);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n// Boilerplate for applying mixins to MatButtonToggleGroup and MatButtonToggleGroupMultiple\n/** @docs-private */\nexport class MatButtonToggleGroupBase {}\nexport const _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  /** The MatButtonToggle that emits the event. */\n  source: MatButtonToggle | null;\n  /** The value assigned to the MatButtonToggle. */\n  value: any;\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n\n  /** The value for the button toggle group. Should match currently selected button toggle. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to toggles in this group. */\n  private _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** The currently selected button toggle, should match the value. */\n  private _selected: MatButtonToggle | null = null;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n      this.valueChange.emit(newValue);\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() valueChange = new EventEmitter<any>();\n\n  /** Whether the toggle group is selected. */\n  @Input()\n  get selected(): MatButtonToggle | null { return this._selected; }\n  set selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  private _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n\n  // TODO: Refactor into shared code with radio.\n  private _updateSelectedButtonToggleFromValue(): void {\n    let isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback that will be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On change callback function.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback that will be triggered when the control has been touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn On touch callback function.\n   */\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n   * @param isDisabled Whether the component should be disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._markButtonTogglesForCheck();\n  }\n\n  private _markButtonTogglesForCheck() {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => toggle._markForCheck());\n    }\n  }\n}\n\n/** Multiple selection button-toggle group. `ngModel` is not supported in this mode. */\n@Directive({\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n})\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n\n  /** Whether the button toggle group should be vertical. */\n  private _vertical: boolean = false;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatButtonToggle implements OnInit, OnDestroy {\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether or not this button toggle is checked. */\n  private _checked: boolean = false;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  /** Whether or not this button toggle is disabled. */\n  private _disabled: boolean = false;\n\n  /** Value assigned to this button toggle. */\n  private _value: any = null;\n\n  /** Whether or not the button toggle is a single selection. */\n  private _isSingleSelector: boolean = false;\n\n  /** Unregister function for _buttonToggleDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  @ViewChild('input') _inputElement: ElementRef;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** The parent button toggle group (multiple selection). Optional. */\n  buttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n\n  /** Unique ID for the underlying `input` element. */\n  get inputId(): string { return `${this.id}-input`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /** Event emitted when the group value changes. */\n  @Output() change: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              @Optional() toggleGroupMultiple: MatButtonToggleGroupMultiple,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _buttonToggleDispatcher: UniqueSelectionDispatcher,\n              private _elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n\n  ngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n  }\n\n  /** Focuses the button. */\n  focus() {\n    this._inputElement.nativeElement.focus();\n  }\n\n  /** Toggle the state of the current button toggle. */\n  private _toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native input. */\n  _onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup._onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    let event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n\n  // Unregister buttonToggleDispatcherListener on destroy\n  ngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update button toggle's status\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {MatCommonModule} from '@angular/material/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/cdk/collections';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the <mat-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {Subject} from 'rxjs/Subject';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  AfterViewChecked,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _id = `mat-option-${_uniqueIdCounter++}`;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** The unique ID of the option. */\n  get id(): string { return this._id; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  @Output() onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n\n  /**\n   * Counts the amount of option group labels that precede the specified option.\n   * @param optionIndex Index of the option at which to start counting.\n   * @param options Flat list of all of the options.\n   * @param optionGroups Flat list of all of the option groups.\n   */\n  static countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let optionsArray = options.toArray();\n      let groups = optionGroups.toArray();\n      let groupCounter = 0;\n\n      for (let i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat?: boolean;\n\n  /**\n   * Whether the `MatFormField` placeholder should try to float.\n   * @deprecated Use `shouldLabelFloat` instead.\n   * @deletion-target 6.0.0\n   */\n  readonly shouldPlaceholderFloat?: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The placeholder text for an `MatFormField`. */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Animations used by the MatFormField. */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {take} from 'rxjs/operators/take';\nimport {startWith} from 'rxjs/operators/startWith';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FloatLabelType, MAT_LABEL_GLOBAL_OPTIONS, LabelOptions} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatLabel} from './label';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {matFormFieldAnimations} from './form-field-animations';\n\n\nlet nextUniqueId = 0;\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\n  private _labelOptions: LabelOptions;\n\n  /** Color of the form field underline, based on the theme. */\n  @Input() color: 'primary' | 'accent' | 'warn' = 'primary';\n\n  /**\n   * @deprecated Use `color` instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get dividerColor(): 'primary' | 'accent' | 'warn' { return this.color; }\n  set dividerColor(value) { this.color = value; }\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat() {\n    return this._floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat() { return this._floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  /**\n   * Whether the placeholder should always float, never float or float as the user types.\n   * @deprecated Use floatLabel instead.\n   * @deletion-target 6.0.0\n   */\n  @Input()\n  get floatPlaceholder(): FloatLabelType { return this._floatLabel; }\n  set floatPlaceholder(value: FloatLabelType) { this.floatLabel = value; }\n\n  /** Whether the label should always float, never float or float as the user types. */\n  @Input()\n  get floatLabel(): FloatLabelType { return this._floatLabel; }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Reference to the form field's underline element. */\n  @ViewChild('underline') underlineRef: ElementRef;\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions) {\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._elementRef.nativeElement.classList\n          .add(`mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    this._control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: string): boolean {\n    let ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && (ngControl as any)[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat ||\n        this._control.shouldPlaceholderFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    return !this._hasLabel() || !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    return this._hasLabel() || this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatLabel = 'always';\n\n      fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {MatLabel} from './label';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n    MatLabel,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {\n  MatOption,\n  MatOptgroup,\n  MAT_OPTION_PARENT_COMPONENT,\n  mixinDisableRipple,\n  CanDisableRipple,\n} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean {\n    return this._isOpen && this.showPanel;\n  }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(classList: string) {\n    if (classList && classList.length) {\n      classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef, private _elementRef: ElementRef) {\n    super();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibiity state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n}\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T,\n    defaultColor?: ThemePalette): Constructor<CanColor> & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs/Subject';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState();\n  stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: Constructor<CanUpdateErrorState> & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField needs to run change detection.\n     */\n    stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   */\n  useUtcForDisplay: boolean;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    // TODO(mmalerba): replace with checks from PLATFORM, logic currently duplicated to avoid\n    // breaking change from injecting the Platform.\n    const isBrowser = typeof document === 'object' && !!document;\n    const isIE = isBrowser && /(msie|trident)/i.test(navigator.userAgent);\n\n    this.useUtcForDisplay = !isIE;\n    this._clampDate = isIE || (isBrowser && /(edge)/i.test(navigator.userAgent));\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = {...displayFormat, timeZone: 'utc'};\n      }\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    let result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, supportsPassiveEventListeners} from '@angular/cdk/platform';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  /** @deprecated Use the animation property instead. */\n  speedFactor?: number;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /** Options that apply to all the event listeners that are bound by the renderer. */\n  private _eventOptions = supportsPassiveEventListeners() ? ({passive: true} as any) : false;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown);\n      this._triggerEvents.set('mouseup', this.onPointerUp);\n      this._triggerEvents.set('mouseleave', this.onPointerUp);\n\n      this._triggerEvents.set('touchstart', this.onTouchStart);\n      this._triggerEvents.set('touchend', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration / (config.speedFactor || 1);\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isPointerDown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) =>\n          element.addEventListener(type, fn, this._eventOptions));\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      this.fadeInRipple(\n          event.touches[0].clientX, event.touches[0].clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, this._eventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param element\n * @param transformValue\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Converts values into strings. Falsy values become empty strings.\n * @docs-private\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n\n/**\n * Converts a value that might be a string into a number.\n * @docs-private\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(@Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    return this._window && (this._window['__karma__'] || this._window['jasmine']);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    if (this._document && typeof getComputedStyle === 'function') {\n      const testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      const computedStyle = getComputedStyle(testElement);\n\n      // In some situations, the computed style of the test element can be null. For example in\n      // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n      // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      if (computedStyle && computedStyle.display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !this._window['Hammer']) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n\n/** Provider for MAT_DATE_LOCALE injection token. */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable()\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  private _hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n  /** List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new this._hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new this._hammer.Pan();\n    const swipe = new this._hammer.Swipe();\n    const press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class MatLineSetter {\n  constructor(private _lines: QueryList<MatLine>, private _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n\n  private _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n\n  private _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n\n  private _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add(className);\n    } else {\n      this._element.nativeElement.classList.remove(className);\n    }\n  }\n\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple reference. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    public element: HTMLElement,\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples.\n   * There are two phases with different durations for the ripples.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * If set, the default duration of the fade-in animation is divided by this value. For example,\n   * setting it to 0.5 will cause the ripple fade-in animation to take twice as long.\n   * A changed speedFactor will not affect the fade-out duration of the ripples.\n   * @deprecated Use the `animation` global option instead.\n   */\n  baseSpeedFactor?: number;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * If set, the normal duration of ripple animations is divided by this value. For example,\n   * setting it to 0.5 will cause the animations to take twice as long.\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\n   * @deprecated Use the [matRippleAnimation] binding instead.\n   */\n  @Input('matRippleSpeedFactor') speedFactor: number = 1;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Launches a manual ripple at the specified position. */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(x, y, {...this.rippleConfig, ...config});\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /** Ripple configuration from the directive's input values. */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n    };\n  }\n\n  /** Whether ripples on pointer-down are disabled or not. */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["SELECT_PANEL_PADDING_X","transform","animate","transition","style","MatTabBodyPortal","_componentFactoryResolver","_viewContainerRef","_host","_this","_super","call","this","tslib_1.__extends","prototype","ngOnInit","_isCenterPosition","_position","attach","_content","_centeringSub","_beforeCentering","subscribe","isCentering","hasAttached","_leavingSub","_afterLeavingCenter","detach","ngOnDestroy","closed","unsubscribe","type","Directive","args","selector","ComponentFactoryResolver","ViewContainerRef","MatTabBody","decorators","Inject","forwardRef","CdkPortalOutlet","_elementRef","_dir","_onCentering","EventEmitter","_onCentered","Object","defineProperty","position","_getLayoutDirection","origin","dir","_origin","_onTranslateTabStarted","e","toState","emit","nativeElement","clientHeight","_onTranslateTabComplete","fromState","value","Component","template","styles","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","animations","matTabsAnimations","translateTab","host","class","propDecorators","Output","Input","nextId","MatTabChangeEvent","MatTabGroupBase","_MatTabGroupMixinBase","mixinColor","mixinDisableRipple","MatTabGroup","elementRef","_changeDetectorRef","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","Subscription","EMPTY","_tabLabelSubscription","_dynamicHeight","_selectedIndex","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","selectChange","_groupId","coerceBooleanProperty","coerceNumberProperty","_backgroundColor","classList","remove","backgroundColor","add","ngAfterContentChecked","indexToSelect","Math","min","_tabs","length","max","tabChangeEvent","_createChangeEvent","Promise","resolve","then","forEach","tab","index","isActive","markForCheck","ngAfterContentInit","_subscribeToTabLabels","changes","_focusChanged","event","toArray","merge","apply","map","_disableChange","concat","_labelChange","_getTabLabelId","i","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","idx","disabled","selectedIndex","focusIndex","_getTabIndex","exportAs","inputs","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","_dynamicHeightDeprecated","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","mixinDisabled","MatTabLabelWrapper","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[class.mat-tab-disabled]","ElementRef","MatTabHeaderBase","_MatTabHeaderMixinBase","MatTabHeader","_viewportRuler","_focusIndex","_scrollDistance","_selectedIndexChanged","_realignInkBar","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","selectFocusedIndex","indexFocused","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","ENTER","SPACE","preventDefault","dirChange","change","observableOf","resize","realign","requestAnimationFrame","_onContentChanges","_checkPaginationEnabled","_isValidIndex","_setTabFocus","tabIndex","containerEl","_tabListContainer","scrollLeft","scrollWidth","_moveFocus","offset","tabs","scrollDistance","translateX","_tabList","v","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","_inkBar","alignToElement","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","ViewportRuler","Directionality","Optional","ViewChild","MatTabNavBase","_MatTabNavMixinBase","MatTabNav","_ngZone","_onDestroy","Subject","_disableRipple","_setLinkDisableRipple","updateActiveLink","element","_activeLinkChanged","_activeLinkElement","runOutsideAngular","pipe","takeUntil","_alignInkBar","next","complete","_tabLinks","link","disableRipple","NgZone","ChangeDetectorRef","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","_tabNavBar","_tabLinkRipple","setupTriggerEvents","parseInt","globalOptions","rippleConfig","speedFactor","baseSpeedFactor","animation","get","enumerable","configurable","MatTabLink","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-label-active]","(click)","Platform","undefined","MAT_RIPPLE_GLOBAL_OPTIONS","Attribute","MatTabsModule","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","ScrollDispatchModule","exports","MatTabLabel","MatTab","declarations","MatInkBar","providers","VIEWPORT_RULER_PROVIDER","MatToolbarBase","_MatToolbarMixinBase","MatToolbarRow","MatToolbar","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","slice","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","PlatformModule","VERSION","Version","snackBarRef","instance","contentRef","_breakpointObserver","observe","Breakpoints","Handset","overlayRef","detachments","take","state","matches","overlayElement","MatSnackBar","_createOverlay","config","overlayConfig","OverlayConfig","direction","positionStrategy","_overlay","global","isRtl","isLeft","horizontalPosition","isRight","left","right","centerHorizontally","verticalPosition","top","bottom","create","_createInjector","userInjector","viewContainerRef","injector","injectionTokens","WeakMap","set","MatSnackBarRef","MAT_SNACK_BAR_DATA","data","PortalInjector","_injector","Injectable","Overlay","LiveAnnouncer","Injector","BreakpointObserver","SkipSelf","MatSnackBarModule","OverlayModule","LayoutModule","MatSnackBarContainer","SimpleSnackBar","entryComponents","LIVE_ANNOUNCER_PROVIDER","MatSortBase","_MatSortMixinBase","sortables","Map","_stateChanges","start","_direction","sortChange","MatSort","getSortInvalidDirectionError","_disableClear","register","sortable","id","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","deregister","delete","sort","active","getNextSortDirection","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","indexOf","ngOnChanges","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","SORT_ANIMATION_TRANSITION","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","matSortAnimations","indicator","trigger","leftPointer","rightPointer","indicatorToggle","keyframes","opacity","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","changeDetectorRef","_sort","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","name","_isDisabled","_isSorted","[class.mat-sort-header-sorted]","[class.mat-sort-header-disabled]","CdkColumnDef","MatSortModule","MatStepLabel","TemplateRef","CdkStepLabel","optionalLabel","MatStepperIntl","MatStepHeader","_focusMonitor","_element","monitor","_intlSubscription","_index","_selected","_active","_optional","stopMonitoring","_stringLabel","label","_templateLabel","_getHostElement","role","selected","optional","matStepperAnimations","horizontalStepTransition","visibility","verticalStepTransition","MatStep","stepper","_errorStateMatcher","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","useExisting","MatStepper","arguments","_steps","_destroyed","_stateChanged","MatHorizontalStepper","aria-orientation","ctorParameters","MatVerticalStepper","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatStepperModule","MatButtonModule","CdkStepperModule","MatIconModule","A11yModule","MatTable","CDK_TABLE_TEMPLATE","CdkTable","MatCellDef","CdkCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","MatHeaderCell","columnDef","cssClassFriendlyName","CdkHeaderCell","MatCell","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","MatRow","MatTableModule","CdkTableModule","MatTableDataSource","initialData","_renderData","BehaviorSubject","_filter","sortingDataAccessor","sortHeaderId","_isNumberValue","Number","sortData","a","b","valueA","valueB","comparatorResult","filterPredicate","accumulator","currentTerm","key","dataStr","keys","reduce","toLowerCase","transformedFilter","_data","_updateChangeSubscription","_paginator","paginator","empty","pageChange","page","_renderChangesSubscription","combineLatest","_a","_filterData","startWith","_orderData","_pageData","filteredData","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","lastPageIndex","ceil","connect","disconnect","show","_setStyles","hide","inkBar","width","templateRef","CdkPortal","MatTabBase","_MatTabMixinBase","textLabel","_contentPortal","hasOwnProperty","TemplatePortal","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","FocusMonitor","MatSlideToggle","labelPosition","ariaLabel","ariaLabelledby","required","checked","_inputElement","_ripple","MatRipple","_thumbBarEl","querySelector","_thumbBarWidth","clientWidth","_thumbEl","_previousChecked","dragging","applyCssTransform","dragX","dragPercentage","percentage","SlideToggleRenderer","MatSlideToggleModule","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MAT_SLIDER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlider","multi","MatSliderChange","MatSliderBase","_MatSliderMixinBase","_invert","_max","_min","_step","_thumbLabel","_tickInterval","_value","_vertical","input","onTouched","_percent","_isSliding","_isActive","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_dirChangeSubscription","_calculatePercentage","_roundLabelTo","toString","split","pop","tickInterval","toFixed","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_thumbGap","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_updateValueFromPosition","x","clientX","y","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","END","HOME","UP_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","size","posComponent","exactValue","_calculateValue","closestValue","round","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","source","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","(focus)","(blur)","(keydown)","(keyup)","(mouseenter)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","_thumbLabelDeprecated","_tickIntervalDeprecated","MatSliderModule","BidiModule","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","InjectionToken","MatSnackBarConfig","politeness","announcementMessage","SHOW_ANIMATION","DECELERATION_CURVE","HIDE_ANIMATION","EXITING","ACCELERATION_CURVE","matSnackBarAnimations","contentFade","COMPLEX","snackBarState","action","[@contentFade]","_animationState","attachComponentPortal","portal","_portalOutlet","Error","snackBarConfig","panelClass","extraClasses","_setCssClasses","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","run","enter","onMicrotaskEmpty","Array","isArray","cssClass","[@state]","(@state.done)","BasePortalOutlet","_live","_parentSnackBar","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","_config","_applyConfigDefaults","_attach","announce","open","message","_attachSnackBarContainer","containerPortal","ComponentPortal","containerRef","container","MatRadioButton","radioGroup","_changeDetector","_radioDispatcher","_uniqueId","nextUniqueId","_checked","_removeUniqueSelectionListener","listen","newCheckedState","notify","_labelPosition","_disabled","_required","focusVia","_markForCheck","focusOrigin","_onInputFocusChange","MatRadioChange","_isRippleDisabled","_onInputClick","stopPropagation","_onInputChange","groupValueChanged","_touch","_focusRipple","fadeOut","launch","persistent","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","align","_MatRadioButtonMixinBase","MatRadioModule","MatRadioGroup","UNIQUE_SELECTION_DISPATCHER_PROVIDER","matDrawerAnimations","transformDrawer","MatDrawerToggleResult","animationFinished","MAT_DRAWER_DEFAULT_AUTOSIZE","MatDrawerContent","_container","_margins","_contentMargins","margins","[style.margin-left.px]","[style.margin-right.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","MatDrawer","onAlignChanged","onPositionChanged","_modeChanged","mode","HTMLElement","_openedVia","enabled","destroy","isOpen","openedVia","_opened","_enableAnimations","close","openedChange","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","onOpen","onClose","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","_isShowingBackdrop","_width","ContentChildren","ContentChild","autosize","MatSidenavContent","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","MatSidenavContainer","MatSidenavModule","useValue","MatSlideToggleChange","MatSlideToggleBase","_MatSlideToggleMixinBase","onChange","_","_slideRenderer","_onChangeEvent","toggle","_onDragStart","startThumbDrag","_onDrag","updateThumbPosition","deltaX","_onDragEnd","newCheckedValue","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","overlayX","overlayY","isLtr","getMatTooltipInvalidPositionError","_invertPosition","main","fallback","MatTooltip","_updateTooltipMessage","_tooltipInstance","updatePosition","_setTooltipClass","tooltipClass","(longpress)","(touchend)","ScrollDispatcher","AriaDescriber","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","_positionDeprecated","showDelay","hideDelay","TooltipComponent","_visibility","_closeOnInteraction","_transformOrigin","_onHide","delay","_hideTimeoutId","_showTimeoutId","afterHidden","isVisible","_setTransformOrigin","overlayPosition","_animationStart","_animationDone","_handleBodyInteraction","matTooltipAnimations","tooltipState","aria-hidden","ɵ0","touchendHideDelay","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER","ARIA_DESCRIBER_PROVIDER","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginator","_pageIndex","_length","_pageSizeOptions","hidePageSize","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","p","_initialized","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","MatPaginatorModule","MatSelectModule","MatProgressBarBase","_MatProgressBarMixinBase","MatProgressBar","_bufferValue","clamp","_primaryTransform","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.mode]","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","_fallbackAnimation","_elementSize","_diameter","EDGE","TRIDENT","animationClass","diameters","_attachStyleNode","_updateElementSize","_strokeWidth","diameter","newValue","viewBox","_circleRadius","strokeWidth","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroupBase","_MatRadioGroupMixinBase","_name","_isInitialized","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_radios","radio","isAlreadySelected","event_1","descendants","MatRadioButtonBase","MatMenuTrigger","closeMenu","menu","_destroyMenu","menuOpen","_resetMenu","_closeSubscription","MatMenu","_resetAnimation","_initMenu","parentMenu","triggersSubmenu","_parentMenu","_setMenuElevation","_setIsMenuOpen","focusFirstItem","_openedByMouse","setElevation","depth","_menuOpen","menuOpened","menuClosed","_menuItemInstance","_highlighted","_checkMenu","throwMatMenuMissingError","_portal","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","scrollStrategy","_scrollStrategy","_positionSubscription","onPositionChange","posX","connectionPair","posY","setPositionClasses","xPosition","originX","originFallbackX","_b","yPosition","overlayFallbackY","_c","originY","originFallbackY","_d","overlayFallbackX","offsetY","overlapTrigger","connectedTo","withDirection","withOffsetY","withFallbackPosition","_cleanUpSubscriptions","_hoverSubscription","_menuClosingActions","backdrop","parentClose","hover","_hovered","_handleMousedown","isFakeMousedownFromScreenReader","openMenu","toggleMenu","aria-haspopup","(mousedown)","MAT_MENU_SCROLL_STRATEGY","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","onMenuOpen","onMenuClose","MAT_MENU_SCROLL_STRATEGY_PROVIDER","MAT_MENU_DEFAULT_OPTIONS","MatMenuModule","matSelectAnimations","transformPanel","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","MatSelectTrigger","MatSelect","_parentFormField","_scrollStrategyFactory","_panelOpen","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_triggerFontSize","_onChange","_onTouched","_optionIds","_panelDoneAnimating","_offsetY","_positions","focused","controlType","optionSelectionChanges","defer","options","option","onSelectionChange","onStable","switchMap","selectionChange","valueChange","valueAccessor","_placeholder","stateChanges","_selectionModel","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","o","SelectionModel","multiple","_initKeyManager","_resetOptions","updateErrorState","panelOpen","_triggerRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","overlayDir","fontSize","_setSelectionByValue","selectedOptions","viewValue","_isRtl","reverse","join","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","altKey","_keyManager","onKeydown","manager","setFirstItemActive","setLastItemActive","activeItem","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_onPanelDone","offsetX","_onFadeInDone","_onAttached","positionChange","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","isEmpty","isUserInput","getMatSelectNonArrayValueError","_clearSelection","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","select","skip","clear","deselect","ActiveDescendantKeyManager","withTypeAhead","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","_setOptionIds","wasSelected","isSelected","_getOptionIndex","_propagateChanges","fallbackValue","valueToEmit","itemHeight","_getItemHeight","activeOptionIndex","labelCount","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollOffset","panelTop","result","current","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","placeholder","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","optionOffsetFromPanelTop","optionHeightAdjustment","maxOptionsDisplayed","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","CdkConnectedOverlay","MatOptgroup","customTrigger","compareWith","errorStateMatcher","MatOptionModule","MatFormFieldModule","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","_scrollDispatcher","_ariaDescriber","_defaultOptions","_message","_manualListeners","IOS","nodeName","webkitUserSelect","userSelect","listener","addEventListener","_disposeTooltip","removeDescription","_isTooltipVisible","describe","_tooltipClass","removeEventListener","_createTooltip","ESCAPE","_handleTouchend","_getOrigin","overlay","_getOverlayPosition","strategy","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","scrollableViewProperties","isOverlayClipped","isDirectionLtr","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatListModule","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","matMenuAnimations","transformMenu","fadeInItems","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","_checkDisabled","_emitHoverEvent","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","_xPosition","_yPosition","_tabSubscription","_classList","_panelAnimationState","_overlapTrigger","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","className","FocusKeyManager","withWrap","item","setFocusOrigin","resetActiveItem","newElevation","customElevation","c","_previousElevation","_startAnimation","_onAnimationDone","MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY","reason","_navList","_isNavList","_lineSetter","MatLineSetter","_lines","_handleFocus","_handleBlur","_MatListItemMixinBase","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatListOptionChange","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","_removeOptionFromList","_text","_emitDeprecatedChangeEvent","_setFocusedOption","tabindex","[class.mat-list-item-disabled]","[class.mat-list-item-focus]","[attr.aria-selected]","_tempValues","_setOptionsFromValues","optionIndex","setNextItemActive","_toggleSelectOnFocusedOption","_getSelectedOptionValues","values","_getOptionByValue","Boolean","focusedOption","focusedIndex","_dateFormats","createMissingDateImplError","_localeSubscription","_dateAdapter","localeChanges","MatDatepickerInput","registerDatepicker","_datepicker","_registerInput","_dateFilter","_validatorOnChange","deserialize","_lastValueValid","isValid","_getValidDateOrNull","oldDate","format","display","dateInput","sameDate","_valueChange","_disabledChange","_datepickerSubscription","selectedChanged","_cvaOnChange","MatDatepickerInputEvent","dateChange","registerOnValidatorChange","validate","_validator","getPopupConnectionElementRef","_formField","underlineRef","_getPopupFallbackOffset","_inputContainerRef","_onInput","date","parse","isDateInstance","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","DateAdapter","MAT_DATE_FORMATS","matDatepicker","matDatepickerFilter","MatDatepickerToggleIcon","MatDatepickerToggle","datepicker","_watchStateChanges","datepickerDisabled","inputDisabled","_datepickerInput","datepickerToggled","openedStream","closedStream","[class.mat-datepicker-toggle-active]","_customIcon","MatDatepickerModule","MatDialogModule","MatCalendar","MatCalendarBody","MatDatepicker","MatDatepickerContent","MatMonthView","MatYearView","MatMultiYearView","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MatDivider","_inset","[class.mat-divider-vertical]","[class.mat-divider-inset]","_hideToggle","displayMode","MatAccordion","hideToggle","CdkAccordion","MatExpansionPanelContent","_template","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelBase","accordion","_uniqueSelectionDispatcher","_MatExpansionPanelMixinBase","expanded","_getExpandedState","_lazyContent","_inputChanges","MatExpansionPanel","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","Host","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","[attr.aria-controls]","[attr.aria-expanded]","[@expansionHeight]","MatExpansionModule","CdkAccordionModule","MatExpansionPanelTitle","MatExpansionPanelDescription","MatGridTile","_rowspan","_colspan","coerceToNumber","_setStyle","property","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","numColumns","tiles","columnIndex","rowIndex","tracker","fill","positions","tile","_trackTile","lastRowMax","rowCount","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","TileStyler","_rows","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","reset","list","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","parseFloat","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","MatGridListModule","MatListBase","_MatListMixinBase","MatListItemBase","_selectedDate","_getDateInCurrentMonth","_init","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","selectedChange","_userSelection","_todayDate","today","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","getFirstDayOfWeek","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","dateFilter","dateA11yLabel","MatCalendarCell","_hasSameMonthAndYear","getDate","d1","d2","_activeDate","oldActiveDate","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","_getActiveCell","yearName","getYearName","_selectedMonth","_getMonthInCurrentYear","_monthSelected","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_isMonthEnabled","addCalendarDays","startView","_dateFilterForViews","minDate","compareDate","maxDate","_startAt","_minDate","_maxDate","_clampedActiveDate","clampDate","_currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","startAt","_focusActiveCell","firstChange","view","monthView","yearView","multiYearView","_userSelected","_goToDateInView","_currentPeriodClicked","_previousClicked","addCalendarMonths","addCalendarYears","_nextClicked","_previousEnabled","_isSameView","_nextEnabled","_handleCalendarBodyKeydown","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_handleCalendarBodyKeydownInMultiYearView","date1","date2","yearsPerPage","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","_calendar","[class.mat-datepicker-content-touch]","_inputSubscription","_popupRef","_focusedElementBeforeOpen","activeElement","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","isAttached","completeClose","afterClosed","componentInstance","_createPopup","keydownEvents","fallbackOffset","MatDialog","NG_VALIDATORS","target","targetElement","_parseValidator","matDatepickerParse","text","_minValidator","controlValue","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","Validators","compose","[attr.role]","[@slideDialog]","(@slideDialog.start)","(@slideDialog.done)","MatDialogContainer","uniqueId","MatDialogRef","_containerInstance","location","disableClose","_afterOpen","_afterClosed","_beforeClose","_locationChanges","_animationStateChanged","phaseName","_result","closeOnNavigation","dialogResult","detachBackdrop","_startExitAnimation","afterOpen","beforeClose","_getPositionStrategy","centerVertically","updateSize","getConfig","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_location","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","MatDialogConfig","getDialogById","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","dialog","dialogConfig","minHeight","maxWidth","maxHeight","$implicit","previousValue","setAttribute","removeAttribute","overlayContainer","getContainerElement","parentElement","siblings","children","sibling","hasAttribute","getAttribute","Location","OverlayContainer","dialogElementUid","MatDialogClose","_dialog","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","_ariaLabelledBy","MatDialogContent","MatDialogActions","SvgIconConfig","url","svgElement","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","iconKey","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","log","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_createSvgElementForSingleIcon","_svgElementFromString","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MatIcon","_iconRegistry","ariaHidden","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","MatTextareaAutosize","_minRows","_setMinHeight","_maxRows","_setMaxHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxRows","resizeToFitContent","fromEvent","window","auditTime","_cacheTextareaLineHeight","textarea","textareaClone","rows","border","padding","overflow","force","_previousValue","placeholderText","scrollHeight","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_type","_readonly","_isServer","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","[class.mat-input-server]","[placeholder]","[required]","[readonly]","MatInputModule","calendarLabel","openCalendarLabel","displayValue","numCols","allowDisabledSelection","activeCell","cellAspectRatio","selectedValueChange","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","attr.aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatCheckbox","indeterminateChange","ripple","indeterminate","_MatCheckboxMixinBase","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","MatBasicChip","MatChip","_selectable","_removable","destroyed","removed","onRemove","selectable","chip","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","_blur","[class.mat-chip-selected]","MatChipRemove","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","MatChipList","_lastDestroyedIndex","_chipSet","_tabOutSubscription","_tabIndex","_userTabIndex","ariaOrientation","_chipInput","chips","_changeSubscription","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","registerInput","inputElement","_focusInput","code","isInputEmpty","_isInputEmpty","isPrevKey","isNextKey","isBackKey","setPreviousItemActive","_updateKeyManager","chipIndex","chipsArray","newFocusIndex","focusChip","correspondingChip","correspondingChipIndex","updateActiveItemIndex","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipSelectionChanges","chipFocusChanges","chipBlurChanges","_chipRemoveSubscription","chipRemoveChanges","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatChipInput","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","_emitChipEnd","addOnBlur","_focus","chipList","MatChipsModule","ariaDescribedBy","autoFocus","matDialogAnimations","slideDialog","_elementFocusedBeforeDialogWasOpened","_state","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","focusInitialElementWhenReady","toFocus","_onAnimationStart","attributes","attribute","MatButton","focusMonitor","stopImmediatePropagation","MatAnchor","MatMiniFab","MatFab","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatButtonToggleGroupBase","_MatButtonToggleGroupMixinBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","_updateButtonToggleNames","_updateSelectedButtonToggleFromValue","_buttonToggles","matchingButtonToggle","buttonToggle","_markButtonTogglesForCheck","[class.mat-button-toggle-vertical]","MatButtonToggle","MatButtonToggleGroupMultiple","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCardHeader","MatCardTitleGroup","MatCardModule","MatCard","MatCheckboxChange","MatCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","TransitionCheckState","Init","_indeterminate","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_getAriaChecked","newState","oldState","_getAnimationClassForCheckStateTransition","_removeFocusRipple","_onInteractionEvent","animSuffix","_emitSelectionChangeEvent","ngAfterViewChecked","_mostRecentViewValue","MatOptionSelectionChange","optionsArray","groups","groupCounter","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","[class.mat-right]","MatHint","MatPlaceholder","MatLabel","MatPrefix","MatSuffix","matFormFieldAnimations","transitionMessages","labelOptions","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","floatLabel","float","_hideRequiredMarker","_floatLabel","_processHints","_validateControlChild","_control","_validatePlaceholders","_syncDescribedByIds","valueChanges","_hintChildren","_errorChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","shouldPlaceholderFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_hasFloatingLabel","_getDisplayedMessages","errorState","_animateAndLockLabel","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-focused]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","floatPlaceholder","_connectionContainerRef","_prefixChildren","_suffixChildren","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","MatAutocompleteBase","_MatAutocompleteMixinBase","MatAutocomplete","showPanel","_isOpen","displayWith","optionSelected","_setVisibility","_setScrollTop","_getScrollTop","_emitSelectEvent","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_manuallyFloatingLabel","_closeKeyEventStream","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","closePanel","_resetLabel","_closingActionsSubscription","_outsideClickStream","clickTarget","formField","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","shouldAnimate","optionOffset","newScrollTop","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","recalculateLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getHostWidth","_getConnectedElement","readOnly","aria-autocomplete","(focusin)","MatAutocompleteModule","DEFAULT_ROUND_BUTTON_COLOR","MatButtonBase","_MatButtonMixinBase","_isRoundButton","_hasHostAttributes","_isIconButton","_i","__extends","d","__","constructor","extendStatics","base","class_1","defaultColor","_color","colorPalette","defaultTabIndex","matcher","range","valueFunction","valuesArray","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","rect","distX","distY","sqrt","transformValue","webkitTransform","scrollStrategies","reposition","block","defaultOptions","tslib_1.__assign","parentRegistry","httpClient","sanitizer","provider","exp","match","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","body","computedStyle","_checkHammerIsAvailable","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","LOCALE_ID","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","String","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","isIE","test","navigator","userAgent","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","_stripDirectionalityCharacters","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","UTC","getHours","getMinutes","getSeconds","getMilliseconds","timeZone","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","_hammerOptions","commonModule","_hammer","Hammer","events","buildHammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLine","_setLineClass","count","_resetClasses","_setClass","isAdd","RippleRef","_renderer","RippleState","HIDDEN","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","RippleRenderer","_target","_isPointerDown","_triggerEvents","_activeRipples","_eventOptions","supportsPassiveEventListeners","passive","onMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","onPointerUp","VISIBLE","_containerElement","containerRect","animationConfig","centered","radius","transitionDuration","rippleRef","FADING_IN","runTimeoutOutsideZone","rippleEl","FADING_OUT","fadeOutAll","_triggerElement","_removeTriggerEvents","ngZone","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","[class.mat-ripple-unbounded]","unbounded","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatPseudoCheckbox","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","_labelId","[class.mat-optgroup-disabled]","_parent","setActiveStyles","setInactiveStyles"],"mappings":"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"}