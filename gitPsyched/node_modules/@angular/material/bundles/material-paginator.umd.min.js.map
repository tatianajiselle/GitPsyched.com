{"version":3,"file":"material-paginator.umd.min.js","sources":["../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional } from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable()\nexport class MatPaginatorIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n})\nexport class MatPaginator implements OnInit, OnDestroy {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(pageIndex: number) {\n    this._pageIndex = coerceNumberProperty(pageIndex);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(length: number) {\n    this._length = coerceNumberProperty(length);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(pageSize: number) {\n    this._pageSize = coerceNumberProperty(pageSize);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = (pageSizeOptions || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input() hidePageSize = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() page = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n"],"names":["MAT_PAGINATOR_INTL_PROVIDER_FACTORY","parentIntl","MatPaginatorIntl","this","changes","Subject","itemsPerPageLabel","nextPageLabel","previousPageLabel","getRangeLabel","page","pageSize","length","Math","max","startIndex","min","type","Injectable","MAT_PAGINATOR_INTL_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","PageEvent","MatPaginator","_intl","_changeDetectorRef","_this","_pageIndex","_length","_pageSizeOptions","hidePageSize","EventEmitter","_intlChanges","subscribe","markForCheck","Object","defineProperty","prototype","pageIndex","coerceNumberProperty","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","map","p","ngOnInit","_initialized","ngOnDestroy","unsubscribe","nextPage","hasNextPage","_emitPageEvent","previousPage","hasPreviousPage","numberOfPages","ceil","_changePageSize","floor","_displayedPageSizeOptions","slice","indexOf","push","sort","a","b","next","Component","args","selector","exportAs","template","styles","host","class","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","preserveWhitespaces","propDecorators","Input","Output","MatPaginatorModule","NgModule","imports","CommonModule","MatButtonModule","MatSelectModule","MatTooltipModule","exports","declarations","providers"],"mappings":"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"}